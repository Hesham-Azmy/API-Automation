{
	"info": {
		"_postman_id": "7498eb05-dc82-469e-ab00-4259b2c7c016",
		"name": "API Export workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Auth-token",
					"item": [
						{
							"name": "Post Auth-tokens",
							"item": [
								{
									"name": "auth-tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3052254-aa18-4ed3-af2b-ce68d620f453",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"access_token\", response.access_token);",
													"",
													"pm.test(\"Check access token\", function () {",
													"    pm.expect(response.access_token).to.eql(pm.environment.get(\"access_token\"));",
													"});",
													"",
													"pm.test(\"Check expires_in\", function () {",
													"    pm.expect(response.expires_in).to.eql(3600);",
													"});",
													"",
													"",
													"pm.test(\"token_type is Bearer\", function () {",
													"    pm.expect(response.token_type).to.eql(\"Bearer\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e79cbbe3-c334-4d13-8b3a-2eb486129c4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{appId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/auth-tokens",
											"host": [
												"{{host}}"
											],
											"path": [
												"auth-tokens"
											]
										}
									},
									"response": []
								}
							],
							"description": "Generates admin Token using appId & secret",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef91448c-adc5-4b98-8f25-37d789fc0146",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8162258c-2e25-48c0-a40d-c7d4df2ecfae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tenants",
					"item": [
						{
							"name": "Post Tenants",
							"item": [
								{
									"name": "Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83dcdd9e-e183-4908-9d5e-86c1bf0a6077",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"tenantId\", response.id);",
													"",
													"pm.test(\"Check apiId\", function () {",
													"    pm.expect(response.apiId).to.eql(pm.environment.get(\"apiId\"));",
													"});",
													"",
													"pm.test(\"Check apiDomain\", function () {",
													"    pm.expect(response.apiDomain).to.eql(pm.environment.get(\"apiDomain\"));",
													"});",
													"",
													"pm.test(\"Check tenantId\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"tenantId\"));",
													"});",
													"",
													"pm.test(\"Check tenant name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham message test\");",
													"});",
													"",
													"pm.test(\"Check first name\", function () {",
													"    pm.expect(response.primaryContact.firstName).to.eql(\"mahmoud\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Hesham message test\",\n    \"primaryContact\":{\n        \"firstName\": \"mahmoud\"\n    } \n}"
										},
										"url": {
											"raw": "{{host}}/tenants",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Creates a new Tenant\n\nPostscript:\nTenant ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a8d7f16-7d07-4dbe-b917-0828b0af32e7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec09b09f-5a0e-4c07-85f4-a338b9eaa4b8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Tenants by ID",
							"item": [
								{
									"name": "tenants by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ff776d0-10ec-490a-9b51-40b764e20e6b",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"clientid\", response.clientId);",
													"",
													"postman.setEnvironmentVariable(\"clientsecret\", response.clientSecret);",
													"",
													"",
													"pm.test(\"Check name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham message test\");",
													"});",
													"",
													"pm.test(\"Check tenantId\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"tenantId\"));",
													"});",
													"",
													"pm.test(\"Check apiId\", function () {",
													"    pm.expect(response.apiId).to.eql(pm.environment.get(\"apiId\"));",
													"});",
													"",
													"pm.test(\"Check clientId\", function () {",
													"    pm.expect(response.clientId).to.eql(pm.environment.get(\"clientid\"));",
													"});",
													"",
													"pm.test(\"Check clientSecret\", function () {",
													"    pm.expect(response.clientSecret).to.eql(pm.environment.get(\"clientsecret\"));",
													"});",
													"",
													"",
													"pm.test(\"Check Self Link\", function () {",
													"    pm.expect(response._links.self.methods).to.eql(['GET']);",
													"}); ",
													"",
													"pm.test(\"Check Delete link\", function () {",
													"    pm.expect(response._links.delete.methods).to.eql(['DELETE']);",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "tenants by invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ff776d0-10ec-490a-9b51-40b764e20e6b",
												"exec": [
													"pm.test(\"teanant doesn't exists, Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Gets Tenant's information by tenantId\n\nPrerequisite:\nTenant ID\n\nPost Script:\nTenantappId\nTenantSecret\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "924cd1ba-8330-4f0e-a0f8-d4d09aae0be0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd2bd446-aa89-487c-b50d-37cdef706cd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Tenants",
							"item": [
								{
									"name": "Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a451e0b-fbfd-4a0a-bcbb-7a510cad0371",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"var selecttenant = (response._embedded.tenants.filter((v) => (v.id === pm.environment.get(\"tenantId\"))))[0];",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check Tenant id exists\", function () {",
													"    pm.expect(selecttenant.id).to.eql(pm.environment.get(\"tenantId\"));",
													"});",
													"",
													"pm.test(\"Check Tenant primary contact name\", function () {",
													"    pm.expect(selecttenant.primaryContact.firstName).to.eql('mahmoud');",
													"});",
													"",
													"pm.test(\"Check Tenant name\", function () {",
													"    pm.expect(selecttenant.name).to.eql('Hesham message test');",
													"});",
													"",
													"pm.test(\"Check Tenant's HAL links exists\", function () {",
													"    pm.expect(selecttenant).to.have.property(\"_links\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all tenant IDs created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40f8644d-e9e3-4598-be15-ca7eeb90272e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "785255d7-746c-4a78-9c01-734a565497e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Tenants",
							"item": [
								{
									"name": "Delete Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a451e0b-fbfd-4a0a-bcbb-7a510cad0371",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tenants with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a451e0b-fbfd-4a0a-bcbb-7a510cad0371",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all tenant IDs created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40f8644d-e9e3-4598-be15-ca7eeb90272e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "785255d7-746c-4a78-9c01-734a565497e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tenants are the users that will use these endpoints",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3039af89-9cfa-43b1-a05d-aba224bdf3e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88a1a749-05fa-46da-962d-0b5b94235003",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Channels",
					"item": [
						{
							"name": "Get Channels",
							"item": [
								{
									"name": "channels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d5187db-9d1a-410b-b8a1-61a0597ee56a",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response conatins HAL links\", function () {",
													"    pm.expect(response._embedded.channels[0]).to.have.property(\"_links\");",
													"    });",
													"",
													"pm.test(\"Check response contains Category shopify\", function () {",
													"    pm.expect(response._embedded.channels[0].category).to.eql('shopify');",
													"});",
													"",
													"pm.test(\"Check resposne contains Key shopify\", function () {",
													"pm.expect(response._embedded.channels[0].key).to.eql('shopify');",
													"});",
													"    ",
													"pm.test(\"Check response contains connectionSchema\", function () {",
													"pm.expect(response._embedded.channels[0]).to.have.property('connectionSchema');",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/channels",
											"host": [
												"{{host}}"
											],
											"path": [
												"channels"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retrieves list of channels to connect to",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9b4a51a-587a-4723-8908-a022a9eaf68e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "770915a0-c577-4648-8d78-57099d932cdc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Channels are all the available channels for the user to connect to f.ex(amazon, shopify...)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b540906e-b7b3-47fa-99a7-af7ad4b969be",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e1525234-bff9-4807-ba9c-3187f21ef449",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Connections",
					"item": [
						{
							"name": "Post Connections",
							"item": [
								{
									"name": "connections (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdShopify\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response contains correct shopurl\", function() {",
													"    pm.expect(response.parameters.shopUrl).to.eql(\"https://growned.myshopify.com\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"shopify\", \"shopUrl\": \"https://growned.myshopify.com\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections  (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdAmazon\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"amazonSellerCentral\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"amazonSellerCentral\", \"sellerId\" : \"A309B2P6BAXG04\", \"marketplaceId\" : \"ATVPDKIKX0DER\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								}
							],
							"description": "Creates a new connection.\n\nPrerequisites\nconnection key & shopURL\n\nPost script:\nconId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5311941f-6f8c-4ee8-86bf-e0d1740d5ff7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "553fa0a1-5d59-4544-916c-be1e473faff6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Connections by ID",
							"item": [
								{
									"name": "connections by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check connection id exists\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check connection has installation links\", function () {",
													"    pm.expect(response._links).to.have.property(\"installStoreApp\");",
													"});",
													"",
													"pm.test(\"Check connection is for shopify\", function () {",
													"    pm.expect(response.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response for connection status\", function () {",
													"    pm.expect(response.status).to.eql(\"connection.requiresInput\");",
													"});",
													"",
													"pm.test(\"Check response contains the right shopurl\", function () {",
													"    pm.expect(response.parameters.shopUrl).to.eql(\"https://growned.myshopify.com\");",
													"});",
													"",
													"pm.test(\"Check response contains the right Key\", function () {",
													"    pm.expect(response.parameters.key).to.eql(\"shopify\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreive's connection information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7421991-8f26-4660-9311-37a3db6fe668",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3825e8e3-56a0-4192-910f-f09a3fb06bf7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Connections",
							"item": [
								{
									"name": "connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fb4e1bd-0b88-4ebc-bbe2-8f2fc7f8dde7",
												"exec": [
													"",
													"pm.test(\"Status code is 502\", function () {",
													"    pm.response.to.have.status(502);",
													"});",
													"// const response = pm.response.json();",
													"",
													"// pm.test(\"Status code is 200\", function () {",
													"//     pm.response.to.have.status(200);",
													"// var selectconnection = (response._embedded.connections.filter((v) => (v.id === pm.environment.get(\"connectionIdShopify\"))))[0];",
													"",
													"// pm.test(\"Check response contains HAL Links\", function () {",
													"//  pm.expect(response).to.have.property(\"_links\");",
													"// });",
													"",
													"//  pm.test(\"Check connection id exists\", function () {",
													"//      pm.expect(selectconnection.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"//  });",
													"",
													"//  pm.test(\"Check connection has HAL links\", function () {",
													"//     pm.expect(selectconnection).to.have.property(\"_links\");",
													"// });",
													"",
													"// pm.test(\"Check connection has installation links\", function () {",
													"//     pm.expect(selectconnection._links).to.have.property(\"installStoreApp\");",
													"// });",
													"",
													"",
													"// pm.test(\"Check connection is for shopify\", function () {",
													"//     pm.expect(selectconnection.key).to.eql(\"shopify\");",
													"// });",
													"",
													"// pm.test(\"Check connection is for shopify\", function () {",
													"//     pm.expect(selectconnection.status).to.eql(\"connection.requiresInput\");",
													"// });",
													"",
													"// pm.test(\"Check response contains the right shopurl\", function () {",
													"//     pm.expect(selectconnection.parameters.shopUrl).to.eql(\"https://growmup.myshopify.com\");",
													"// });",
													"",
													"// pm.test(\"Check response contains the right Key\", function () {",
													"//     pm.expect(selectconnection.parameters.key).to.eql(\"shopify\");",
													"// });});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all connections related to this user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d36a738b-f404-46d5-a253-3abef0c2e38a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d1f1896-759f-482a-8fb3-1fbfd861b9e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Connections",
							"item": [
								{
									"name": "connections by ID (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by ID (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Connection is the channel that a user has connected to, its the connection between user and channel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1691857d-eae0-4389-864a-f13ad6e21bd8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "040b3b13-8b49-40ec-807c-397121477082",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Schema",
					"item": [
						{
							"name": "Get Schemas",
							"item": [
								{
									"name": "schemas (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"const schema = response._embedded.schemas[0];",
													"postman.setEnvironmentVariable(\"schemaIdShopify\", schema.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has HAL Links\", function () {",
													"    pm.expect(response._embedded.schemas[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has ID\", function () {",
													"    pm.expect(response._embedded.schemas[0].id).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response._embedded.schemas[0].key).to.eql(\"shopify\");",
													"});",
													"pm.test(\"Check response schema has description\", function () {",
													"    pm.expect(response._embedded.schemas[0].description).to.eql(\"Shopify Default Schema\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}/schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}",
												"schemas"
											]
										}
									},
									"response": []
								},
								{
									"name": "schemas (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"const schema = response._embedded.schemas[0];",
													"postman.setEnvironmentVariable(\"schemaIdAmazon\", schema.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has HAL Links\", function () {",
													"    pm.expect(response._embedded.schemas[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has ID\", function () {",
													"    pm.expect(response._embedded.schemas[0].id).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response._embedded.schemas[0].key).to.eql(\"amazonSellerCentral\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}/schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}",
												"schemas"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives a list of schemas\n\nPost Script:\nschemaId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a499ff5-e874-4499-9cd3-c5b4d8df4dd7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "548e0f3c-04d0-44bd-84c4-8d63fb75682d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Schemas by ID",
							"item": [
								{
									"name": "schemas by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "203708b4-992f-41ca-8cf6-cceba277e6b6",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema fields\", function () {",
													"    pm.expect(response.$schema).to.eql(\"http://json-schema.org/draft-07/schema#\");",
													"    pm.expect(response.title).to.eql(\"List of Shopify Products' Source Documents\");",
													"    pm.expect(response.type).to.eql(\"array\");",
													"});",
													"",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response.key).to.eql(\"shopify\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}/schemas/{{schemaIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}",
												"schemas",
												"{{schemaIdShopify}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all info of a schemas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "af57ed87-2cc4-40db-b765-ad6d38f1ed88",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2fdef59-29a6-42de-a461-02c9b2aa0966",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Schemas are the templates available inside of a channel. f.ex (amazon -> lightning)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d38848a-51a3-4ccb-9c92-ad6f6856496b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6ad8d5b4-0487-4c34-9edc-0648bc03376e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Distribution-packages",
					"item": [
						{
							"name": "Post Disutribution-packages",
							"item": [
								{
									"name": "distribution-package (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdShopify\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdAmazon\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdAmazon}}\",\n    \"channelSchemaId\": \"{{schemaIdAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with name and key only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdkeyonly\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								}
							],
							"description": "Creates a distribution package\n\nPrerequisite:\nConid\nschemaId\n\nPost Script:\ndpId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81de3607-69c2-46f7-88f7-155bf81f0e7d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03f29cff-2889-4811-833b-64d60fb3eec0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Disutribution-packages by ID",
							"item": [
								{
									"name": "distribution-packages by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b25a114a-fd2b-4158-9fb0-e8bc0c33fcfc",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"",
													"pm.test(\"Check response has connectionId\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaId\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "retrieves all information of distribution package\n\nPrerequisite:\ndpId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "28846cbb-3a17-41c7-bbaf-59458e115fbe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "74532dce-2aac-4397-9a10-2c6425ade824",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Disutribution-packages",
							"item": [
								{
									"name": "distribution-packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eda0fbe-a755-4843-b9e7-7ae1685c6a8e",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"var selectpackage = (response._embedded.distributionPackages.filter((v) => (v.id === pm.environment.get(\"distPkgIdShopify\"))))[0];",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check package id exists\", function () {",
													"    pm.expect(selectpackage.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has HAL links\", function () {",
													"    pm.expect(selectpackage).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check package has connectionid\", function () {",
													"    pm.expect(selectpackage.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has document key\", function () {",
													"    pm.expect(selectpackage.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check package has Schema id\", function () {",
													"    pm.expect(selectpackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has the correct name\", function () {",
													"    pm.expect(selectpackage.name).to.eql(\"Hesham Test\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								}
							],
							"description": "retreives all info of a distribution package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f461ca7-505a-4a25-ac06-767af1b52e33",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da5573cd-a2ce-45f2-92cb-18ca01bebee2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Patch Distribution-packages",
							"item": [
								{
									"name": "Distribution-packages (adding connection and schema)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6179e4a-b5c6-445b-8921-f2ac709b0dd0",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test edited\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.baseSourceSchemaId).to.eql(\"bi123456789012345678901234edited\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test edited\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n    \"baseSourceSchemaId\": \"bi123456789012345678901234edited\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Distribution-packages is a collection of information linked to gether under 1 ID, these information are the connectionID, schemaID, baseSchemaID in addition to the unique identifier of products (productKey) & a name for this Distribution-packag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "662eae6a-a934-4006-80c7-b481103b6aa2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "617e540b-f34a-49f9-8f85-e442a6a64f72",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Source Document",
					"item": [
						{
							"name": "Put Source document ",
							"item": [
								{
									"name": "source-documents (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "816693fa-b62f-41db-8589-48bd5d3991e1",
												"exec": [
													"pm.test(\"Status code is 502 Accepted\", function () {",
													"    pm.response.to.have.status(502);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"document\": {\n            \"handle\": \"dh-0001\",\n            \"title\":\"first product to be pushed\",\n            \"product_type\":\"cars\"\n        },\n        \"action\": \"upsert\"\n    },\n    {\n        \"document\": {\n            \"handle\": \"dh-0002\",\n            \"title\":\"Second product to be pushed\",\n            \"product_type\":\"dress\"\n        },\n        \"action\": \"upsert\"\n    },\n    {\n        \"document\": {\n            \"handle\": \"dh-0003\",\n            \"title\":\"first product to be pushed\",\n            \"product_type\":\"rubish\"\n        },\n        \"action\": \"delete\"\n    }\n]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "source-documents (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "816693fa-b62f-41db-8589-48bd5d3991e1",
												"exec": [
													"pm.test(\"Status code is 502 Accepted\", function () {",
													"    pm.response.to.have.status(502);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"document\": {\n            \"handle\": \"dh-0001\",\n            \"title\":\"first product to be pushed\",\n            \"product_type\":\"cars\"\n        },\n        \"action\": \"upsert\"\n    },\n    {\n        \"document\": {\n            \"handle\": \"dh-0002\",\n            \"title\":\"Second product to be pushed\",\n            \"product_type\":\"dress\"\n        },\n        \"action\": \"upsert\"\n    },\n    {\n        \"document\": {\n            \"handle\": \"dh-0003\",\n            \"title\":\"first product to be pushed\",\n            \"product_type\":\"rubish\"\n        },\n        \"action\": \"delete\"\n    }\n]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Source Documents generator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2848730c-404c-4134-ab18-bbaf844032ec",
												"exec": [
													"const uuid = require('uuid');",
													"",
													"const DOCUMENT_COUNT = 1000;//JSON.parse(pm.environment.get('randomDocumentCount')) || 4; ",
													"",
													"const inventoryLevel = false; // Do you want inventoryLevel defi    nition in your variants? if yet set it to true",
													"const inventoryItem = false; // Do you want inventoryItem definition in your variants? if yet set it to true",
													"",
													"// random data utils",
													"const name1 = [ 'Hesham', 'Mohamed', 'Azmy', 'Ahmed', 'Bassiouny', 'Venzee']; // will be used for title and name generations",
													"const name2 = [ 'Tokyo', 'Berlin', 'Mosco', 'Rio', 'Denver', 'Nairobi']; // will be used for title and name generations",
													"",
													"const imageUrls = [ 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img5.jpg', 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img4.jpg', 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img3.jpg', 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img2.jpg', 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img1.jpg', 'https://s3-us-west-2.amazonaws.com/images-testing-vze/img6.jpg'];",
													"const inventoryPolicy = [\"continue\", \"deny\"];",
													"const booelanValues = [true, false];",
													"const option1Values = [ 'black', 'pink', 'first', 'second', 'third', 'blue'];",
													"const priceValues = [ 0, 12.30, 45.99, 0, 10, 20.99, 0 ];",
													"",
													"function createExpectedAmountOfDocuments(documentCount){",
													"",
													"    const sourceDocuments = [];",
													"",
													"    const imageCountArray   = [...Array(documentCount)].map(e=>~~(Math.random()*5)); //~~ is shorthand for Math.floor",
													"    const variantCountArray = [...Array(documentCount)].map(e=>~~(Math.random()*7));",
													"",
													"    for(let i=0; i< documentCount; i++){",
													"",
													"        const variantCount   = variantCountArray[i];",
													"        const imageCount     = imageCountArray[i];",
													"        const randomDocument = createRandomSourceDocument(variantCount, imageCount);",
													"",
													"        sourceDocuments.push(randomDocument);",
													"    }",
													"",
													"    return sourceDocuments;",
													"",
													"}",
													"",
													"// Setting the body",
													"const body = createExpectedAmountOfDocuments( DOCUMENT_COUNT );",
													"postman.setEnvironmentVariable(\"distPkgBody\", JSON.stringify( body) );",
													"",
													"// random source doc generator functions",
													"function createRandomSourceDocument( variantCount, imageCount ){",
													"",
													"  const productTitle = generateTitle();",
													"",
													"  const document = {",
													"    title: productTitle,",
													"    handle: uuid.v4(),",
													"    product_type: 'machinery',",
													"    vendor: 'MyVendor'",
													"  };",
													"",
													"  if(imageCount !== 0) document.images = createImages(imageCount);",
													"  if(variantCount !== 0) document.variants = createVariants(variantCount, document.images);",
													"",
													"  return getBasicDocument( document )",
													"",
													"}",
													"",
													"function getBasicDocument( document ){",
													"  return {",
													"    document,",
													"    action: 'upsert'",
													"  }",
													"",
													"}",
													"",
													"function createVariants( variantCount, images ){",
													"",
													"  let imageForVariant;",
													"",
													"  const withInventoryItem  = inventoryItem;",
													"  const withInventoryLevel = inventoryLevel;",
													"",
													"  if( images && images.length ){ imageForVariant = images[~~(Math.random()*images.length)] }",
													"",
													"  const variantIndexArray = Array.from(Array(variantCount), (_, index) => index + 1);",
													"  return { upsert: variantIndexArray.map( position=>createVariant(position, imageForVariant, withInventoryItem, withInventoryLevel)) };  ",
													"",
													"}",
													"",
													"function createImages( imageCount ){",
													"",
													"  const imageIndexArray = Array.from(Array(imageCount), (_, index) => index + 1);",
													"  return imageIndexArray.map( position=>createImage(position, false, false)); //todo change",
													"",
													"}",
													"",
													"/// random image creation",
													"",
													"function createImage(){",
													"",
													"    return {",
													"        src: getRandomImage(1)",
													"    };",
													"",
													"}",
													"",
													"function getRandomImage() {",
													"",
													"    const index = Math.floor(Math.random() * Math.floor(imageUrls.length));",
													"    return imageUrls[index];",
													"",
													"}",
													"",
													"/// create random variant ",
													"",
													"function createVariant( position, image, withInventoryItem, withInventoryLevel ){",
													"",
													"    let variant = {",
													"        handle: uuid.v4(),",
													"        inventory_policy: inventoryPolicy[getRandomInt(2)],",
													"        price: priceValues[getRandomInt(7)],",
													"        compare_at_price: priceValues[getRandomInt(7)],",
													"        taxable: booelanValues[getRandomInt(2)],",
													"        position: position,",
													"        weight: 45,",
													"        weight_unit: 'kg',",
													"        grams: 40,",
													"        inventory_management: 'Shopify',",
													"        inventory_quantity: 4,",
													"        requires_shipping: booelanValues[getRandomInt(2)],",
													"        fulfillment_service: 'manual',",
													"        barcode: 'XYZ123',",
													"        option1: generateTitle() + option1Values[getRandomInt(option1Values.length)]",
													"    };",
													"",
													"    if(image) {",
													"        variant.image = image;",
													"    }",
													"",
													"    if(withInventoryItem) {",
													"        variant.inventoryItem = {",
													"            cost: priceValues[getRandomInt(7)],",
													"            country_code_of_origin: 'FR',",
													"            province_code_of_origin: 'QC',",
													"            handle: uuid.v4(),",
													"            tracked: withInventoryLevel",
													"        }",
													"    }",
													"",
													"    if(withInventoryLevel) {",
													"        variant.inventoryLevel = [{",
													"            location_id: 16479370,  // https://venzee.myshopify.com/admin/api/2019-04/locations.json",
													"            available: 10",
													"        }];",
													"    }",
													"",
													"    return variant;",
													"",
													"}",
													"",
													"function getRandomInt(max) {",
													"    return Math.floor(Math.random() * Math.floor(max));",
													"}",
													"",
													"// utils for random data",
													"",
													"function getRandomInt(min, max) {",
													"    return Math.floor(Math.random() * (max - min)) + min;",
													"}",
													"",
													"function generateTitle() {",
													"",
													"    return name1[getRandomInt(0, name1.length + 1)] + ' ' + name2[getRandomInt(0, name2.length + 1)];",
													"",
													"}",
													"",
													"console.log(pm.environment.get('distPkgBody'))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3dfb324e-7fe2-4cba-85c3-5c9cf489167c",
												"exec": [
													"pm.test(\"Status code is 502\", function () {",
													"    pm.response.to.have.status(502);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{distPkgBody}}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											]
										}
									},
									"response": [
										{
											"name": "{{host}}/distribution-packages/{{distPkgId}}/source-documents",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{distPkgBody}}"
												},
												"url": {
													"raw": "{{host}}/distribution-packages/{{distPkgId}}/source-documents",
													"host": [
														"{{host}}"
													],
													"path": [
														"distribution-packages",
														"{{distPkgId}}",
														"source-documents"
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Date",
													"value": "Thu, 09 May 2019 10:35:33 GMT"
												},
												{
													"key": "x-amzn-RequestId",
													"value": "2c731fb8-7246-11e9-baa9-331a3e59185c"
												},
												{
													"key": "x-amz-apigw-id",
													"value": "ZaVSSGgovHcFcqQ="
												},
												{
													"key": "X-Amzn-Trace-Id",
													"value": "Root=1-5cd40275-8c3ddd547a1f5998be225978;Sampled=0"
												},
												{
													"key": "X-Cache",
													"value": "Miss from cloudfront"
												},
												{
													"key": "Via",
													"value": "1.1 dc368befe9301385c5ebfce15527c741.cloudfront.net (CloudFront)"
												},
												{
													"key": "X-Amz-Cf-Id",
													"value": "poi50bScIV9fi4vMwWrXnYIWZr-nu73X_ugj03UPMNEjOMaG8iP2SA=="
												}
											],
											"cookie": [],
											"body": null
										}
									]
								}
							],
							"description": "adds/deletes a document(s) to a distribution package\n\nPrerequisite:\ndpid\n\nAdmin user cannot do get/put Source document",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68ff0fd8-7558-4d3f-b3b6-cf6bc6cc1351",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "436aa545-7805-44a0-898c-41ef7663b94e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Source Document",
							"item": [
								{
									"name": "Source document",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5454d418-4897-4445-b813-0c6e7c4ea6ee",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "source-documents with offset & limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "080734ac-4f01-4f52-9a95-1253fb5fd4d7",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}} /source-documents?offset=0&limit=2",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}} ",
												"source-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "retreives all the source documents for a distribution package.\n\nPrerequisite: \ndpId \n\nAdmin user cannot do get/put Source document",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86afbb66-6856-4d8d-8b46-2d1ef0c56f94",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ba4e2fc-5ce5-405b-9b14-96a641c86bba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Source-Documents are the products inside a product list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cffb77b-170f-420c-89ed-0e4caa8a973b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78fbdcc0-54be-4ba5-987f-fdd6fadc05fc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "channel Configurations",
					"item": [
						{
							"name": "Put ChannelConfigurations",
							"item": [
								{
									"name": "channelConfigurations by tenant (shopify & ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"pm.test(\"Status code is 202 Accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyStoreId}}\",\n\t\"clientSecret\": \"{{shopifyStoreSecret}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n},\n{\n\t\"key\": \"amazonSellerCentral\",\n    \"domainName\": \"data-distribution.solutions.qa\"\n\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with missing key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that key is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"key\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with missing ClientId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that clientId is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"clientId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with missing clientSecret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that clientSecret is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"clientSecret\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with missing installUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that installUrl is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"installUrl\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with missing confirmUrl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that confirmUrl is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"confirmUrl\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"{{installurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with wrong tenantId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"pm.test(\"Tenant is not found 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}2/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}2",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with wrong installUrl format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check the installUrl format\", function() {",
													"    pm.expect(response[0].params.format).to.eql(\"uri\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"non URL Format\",\n\t\"confirmUrl\": \"{{confirmurl}}\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								},
								{
									"name": "channelConfigurations with wrong confirmUrl format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check the confirmUrl format\", function() {",
													"    pm.expect(response[0].params.format).to.eql(\"uri\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{shopifyid}}\",\n\t\"clientSecret\": \"{{shopifysecret}}\",\n\t\"installUrl\": \"{{installurl}}\",\n\t\"confirmUrl\": \"non URL Format\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configurations"
											]
										}
									},
									"response": []
								}
							],
							"description": "Sets a new channel configuration for a tenant for by default to all tenants",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "448f5845-3158-4ab1-ae07-b24c12fd4021",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0744f8d6-cdc6-4536-a2ae-5417a841373c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get ChannelConfigurations",
							"item": [
								{
									"name": "channelConfigurations Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405d2e08-1bcb-4029-93de-898c5b236f0f",
												"exec": [
													"pm.test(\"Status code is 202 Accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/tenants/default/channel-configurations",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"default",
												"channel-configurations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Channel Configurations is only done by Admin user for initial time only, it sets the user's credentials to their shop on shopify, by adding the install URL and confirm URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3aa3c4f0-843b-4f37-896e-b5a46d7e6519",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dfd3ba45-32e8-4ebd-aff6-d98647bccb8f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "web-hooks",
					"item": [
						{
							"name": "Post Web-hooks",
							"item": [
								{
									"name": "web-hooks (connection.requiresInput)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (distributionPackage.released)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"distributionPackage.released\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (distributionPackage.staged)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"distributionPackage.staged\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (tenant.dataDelete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"tenant.dataDeleted\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks to be deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\",\n\t\"url\":\"https://enwuvxxawc87.x.pipedream.net/\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								}
							],
							"description": "Registers an API to the web-hook to receive notifications a specific type of events",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8728e1f1-516c-4cfc-bd4c-77110d96d4dc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8b3149e-608d-40aa-b5af-fc3a6b626429",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Web-hooks",
							"item": [
								{
									"name": "Get Web-hooks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3e0089a-e2e4-42fe-86e6-b722ace7277f",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has HAL Links\", function () {",
													"    pm.expect(response._embedded.webHooks[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has ID\", function () {",
													"    pm.expect(response._embedded.webHooks[0]).to.have.property(\"id\");",
													"});",
													"pm.test(\"Check response webHooks has type\", function () {",
													"    pm.expect(response._embedded.webHooks[0].type).to.eql(\"invokeWebHook\");",
													"});",
													"pm.test(\"Check response webHooks has URL\", function () {",
													"    pm.expect(response._embedded.webHooks[0].url).to.eql(\"https://enwuvxxawc87.x.pipedream.net/\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Web-hooks by ID",
							"item": [
								{
									"name": "Get Web-hooks by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has ID\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"admin_webhookId\"));",
													"});",
													"pm.test(\"Check response webHooks has type\", function () {",
													"    pm.expect(response.type).to.eql(\"invokeWebHook\");",
													"});",
													"pm.test(\"Check response webHooks has URL\", function () {",
													"    pm.expect(response.url).to.eql(\"https://enwuvxxawc87.x.pipedream.net/\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{admin_webhookId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{admin_webhookId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Web-hooks",
							"item": [
								{
									"name": "Delete Web-hooks by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													"pm.test(\"Status code is 202 accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{admin_webhookId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{admin_webhookId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Web-hooks is the endpoint where all the messages comming back to the user are received at after inistalling it properly with the key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3941dab7-a271-45b9-95d7-72a09f15a821",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37e39bb0-647e-4310-9ea7-6655c96ff987",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Staged-releases",
					"item": [
						{
							"name": "Post staged-releases",
							"item": [
								{
									"name": "Post staged-releases (Shopify)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fad2ceb3-e777-4540-8eda-34860d87ecf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fcdf897-3896-445a-b18b-e5826f256573",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"stagedrelasesIdShopify\", reponse.id);}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/staged-releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post staged-releases (ASC)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fad2ceb3-e777-4540-8eda-34860d87ecf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fcdf897-3896-445a-b18b-e5826f256573",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"stagedrelasesIdAmazon\", reponse.id);}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/staged-releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Staged-releases",
							"item": [
								{
									"name": "Get all staged-releases results (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (Shopify valid-documents only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/valid-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"valid-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (Shopify errors only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with low offset and limit (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with High offset and limit (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results?offset=0&limit=600",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "600"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC valid-documents only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/valid-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"valid-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC errors only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with low offset and limit (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with High offset and limit (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results?offset=0&limit=600",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "600"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ٌٌReleases",
					"item": [
						{
							"name": "Post releases",
							"item": [
								{
									"name": "Post releases (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db039025-c0fc-4f10-a8b6-6d607695f9a2",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"relasesIdShopify\", reponse.id);}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post releases (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db039025-c0fc-4f10-a8b6-6d607695f9a2",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"relasesIdAmazon\", reponse.id);}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get releases",
							"item": [
								{
									"name": "Get all releases results (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (Shopify released-documents only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results/released-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results",
												"released-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (Shopify errors only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with low offset and limit (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with high offset and limit (Shopify)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results?offset=0&limit=2",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC released-documents only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/released-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"released-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC errors only)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with low offset and limit (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with high offset and limit (ASC)",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results?offset=0&limit=2",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tenant user",
			"item": [
				{
					"name": "Swagger file",
					"item": [
						{
							"name": "{{host}} with tenant token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1aad6458-40b5-48f2-be8e-64705ec54877",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenantaccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "{{host}} with no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1aad6458-40b5-48f2-be8e-64705ec54877",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}",
									"host": [
										"{{host}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Test Run",
					"item": [
						{
							"name": "https://venzee.testrail.net/index.php?/api/v2/add_run/",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c50bcad0-1c35-41f7-a79d-062c1b9cbade",
										"exec": [
											"",
											"const response = pm.response.json()",
											"pm.environment.set(\"runId\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8fa69a8f-8665-4be3-94e7-3f62bc9059da",
										"exec": [
											"var dateNow= new Date();\r",
											"postman.setEnvironmentVariable(\"currentDate\", dateNow.toISOString());\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY=",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\n \t\"name\":\"Automation Test Run {{currentDate}}\",\n \t\"include_all\": false,\n \t\"case_ids\": [\"22568\", \"22615\", \"22574\", \"30670\", \"30671\", \"30672\", \"30673\", \"30674\", \"30675\", \"30676\", \"22569\", \"22210\", \"22211\", \"22212\", \"22616\", \"22617\", \"22618\", \"22213\", \"22214\", \"30677\", \"22572\", \"22620\", \"22207\", \"22209\", \"22570\", \"22571\", \"22619\", \"22208\", \"30678\", \"30680\", \"30681\", \"30682\", \"30683\", \"22206\", \"22573\", \"30679\", \"30684\", \"30687\", \"30689\", \"30690\", \"30692\", \"30695\", \"30686\", \"30685\", \"30688\", \"30691\", \"30693\", \"30694\", \"30708\", \"30709\", \"30719\", \"30720\", \"30721\", \"30722\", \"30723\", \"30738\", \"30739\"]\n }"
								},
								"url": {
									"raw": "https://venzee.testrail.net/index.php?/api/v2/add_run/1",
									"protocol": "https",
									"host": [
										"venzee",
										"testrail",
										"net"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "/api/v2/add_run/1",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Auth-token",
					"item": [
						{
							"name": "Post Auth-tokens",
							"item": [
								{
									"name": "auth-tokens tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3052254-aa18-4ed3-af2b-ce68d620f453",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"tenantaccess_token\", response.access_token);",
													"",
													"pm.test(\"Check access token\", function () {",
													"    pm.expect(response.access_token).to.eql(pm.environment.get(\"tenantaccess_token\"));",
													"});",
													"",
													"pm.test(\"Check expires_in\", function () {",
													"    pm.expect(response.expires_in).to.eql(3600);",
													"});",
													"",
													"pm.test(\"token_type is Bearer\", function () {",
													"pm.expect(response.token_type).to.eql(\"Bearer\");",
													"});",
													"",
													" if (response.expires_in == 3600 && response.token_type == \"Bearer\" && response.access_token == pm.environment.get(\"tenantaccess_token\") ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22568`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22568`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientsecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientid}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/auth-tokens",
											"host": [
												"{{host}}"
											],
											"path": [
												"auth-tokens"
											]
										}
									},
									"response": []
								},
								{
									"name": "auth-tokens invalid appid or secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3052254-aa18-4ed3-af2b-ce68d620f453",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check expires_in\", function () {",
													"    pm.expect(response.error).to.eql(\"invalid_client\");",
													"});",
													"",
													"",
													"",
													" if (response.error == \"invalid_client\" ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22615`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22615`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e79cbbe3-c334-4d13-8b3a-2eb486129c4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{clientsecret}}2",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{clientid}}2",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/auth-tokens",
											"host": [
												"{{host}}"
											],
											"path": [
												"auth-tokens"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Generates Tenant Token using tenantappId & tenantsecret\n\nPrerequisites:\nrun Post Tenants\nrun Get Tenants by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9da188f5-9825-4ca3-a2b2-c831764253cf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "26eed070-802d-4e39-a555-96b60baa77da",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "web-hooks",
					"item": [
						{
							"name": "Post Web-hooks",
							"item": [
								{
									"name": "web-hooks (connection.requiresInput)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62748ec0-158f-4118-845c-d1e25296ccc3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});",
													"",
													"",
													" if (response.id && response.key && response.url && response._links){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22574`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22574`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (distributionPackage.staged)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62748ec0-158f-4118-845c-d1e25296ccc3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});",
													"",
													" if (response.id && response.key && response.url && response._links){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30670`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30670`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"distributionPackage.staged\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (distributionPackage.released)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62748ec0-158f-4118-845c-d1e25296ccc3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});",
													"",
													"",
													" if (response.id && response.key && response.url && response._links){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30709`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30709`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"distributionPackage.released\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (connection.established)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62748ec0-158f-4118-845c-d1e25296ccc3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.established\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks to be deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62748ec0-158f-4118-845c-d1e25296ccc3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"webhookId\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks (tenant.dataDeleted)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"admin_webhookId\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains id\", function() {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response contains key\", function() {",
													"    pm.expect(response).to.have.property(\"key\");",
													"});",
													"",
													"pm.test(\"Check response contains url\", function() {",
													"    pm.expect(response).to.have.property(\"url\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"tenant.dataDeleted\",\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks with missing key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that key is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"key\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"key\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\": \"Failed at missing key\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"url\":\"{{web-hooks URL}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks with missing URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that url is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"url\");",
													"});",
													"",
													"",
													" if (response[0].params.missingProperty == \"url\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\": \"Failed at Missing URL\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\"\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks with invalid key value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check the allowed value for key\", function() {",
													"    pm.expect(response[0].params.allowedValues[0]).to.eql(\"connection.requiresInput\");",
													"});",
													"",
													" if (response[0].params.allowedValues[0] == \"connection.requiresInput\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\": \"Failed at invalid key value\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.blabla\",\n\t\"url\":\"{{web-hooks URL}}\"\n\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								},
								{
									"name": "web-hooks with invalid url value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca30eb1-21cf-4edf-86ab-b2d1ccb0d4d8",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check the url format validaiton\", function() {",
													"    pm.expect(response[0].params.format).to.eql(\"uri\");",
													"});",
													"",
													" if (response[0].params.format == \"uri\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30672`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\": \"Failed at invalid URL value\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"key\": \"connection.requiresInput\",\n\t\"url\":\"non url format\"\n\n}"
										},
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Web-hooks",
							"item": [
								{
									"name": "Get Web-hooks",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3e0089a-e2e4-42fe-86e6-b722ace7277f",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has HAL Links\", function () {",
													"    pm.expect(response._embedded.webHooks[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has ID\", function () {",
													"    pm.expect(response._embedded.webHooks[0]).to.have.property(\"id\");",
													"});",
													"pm.test(\"Check response webHooks has type\", function () {",
													"    pm.expect(response._embedded.webHooks[0].type).to.eql(\"invokeWebHook\");",
													"});",
													"pm.test(\"Check response webHooks has URL\", function () {",
													"    pm.expect(response._embedded.webHooks[0].url).to.eql(\"https://enwuvxxawc87.x.pipedream.net/\");",
													"});",
													"",
													"",
													" if (response._links && response._embedded.webHooks[0]._links && response._embedded.webHooks[0].id && response._embedded.webHooks[0].type == \"invokeWebHook\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30673`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30673`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Web-hooks by ID",
							"item": [
								{
									"name": "Get Web-hooks by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response webhook has ID\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"webhookId\"));",
													"});",
													"pm.test(\"Check response webHooks has type\", function () {",
													"    pm.expect(response.type).to.eql(\"invokeWebHook\");",
													"});",
													"pm.test(\"Check response webHooks has URL\", function () {",
													"    pm.expect(response.url).to.eql(\"https://enwuvxxawc87.x.pipedream.net/\");",
													"});",
													"",
													" if (response._links && response.id == pm.environment.get(\"webhookId\") && response.type == \"invokeWebHook\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30674`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30674`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{webhookId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{webhookId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Web-hooks by Invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													"",
													"pm.test(\"Status code is 404 not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													"",
													" if (responseCode.code == 404) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30708`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30708`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{webhookId}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{webhookId}}2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Web-hooks",
							"item": [
								{
									"name": "Delete Web-hooks by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													"pm.test(\"Status code is 202 accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													" if (responseCode.code == 202) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30675`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30675`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{webhookId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{webhookId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Web-hooks by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													"pm.test(\"Status code is 404 not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													" if (responseCode.code == 404) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30676`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30676`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{webhookId}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{webhookId}}2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Web-hooks not owned by tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e721cd71-8cc9-4879-bb05-91e6a88320dc",
												"exec": [
													"pm.test(\"Status code is 404 not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/web-hooks/{{admin_webhookId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"web-hooks",
												"{{admin_webhookId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Registers an API to the web-hook to receive notifications a specific type of events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "443ec44e-4c2c-4515-a4e4-3500c6dc2ef0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "edeb6969-a33e-4a6d-9b16-5281ef4f778d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "channels",
					"item": [
						{
							"name": "Get Channels",
							"item": [
								{
									"name": "channels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13ad4363-0583-4526-9a19-74e0f05bc8a3",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"var selectchannel = (response._embedded.channels.filter((v) => (v.category === \"shopify\")))[0];",
													"var selectchannel2 = (response._embedded.channels.filter((v) => (v.category === \"amazon\")))[0];",
													"",
													"pm.test(\"Check response conatins HAL links\", function () {",
													"    pm.expect(selectchannel).to.have.property(\"_links\");",
													"    });",
													"",
													"pm.test(\"Check response contains Category shopify\", function () {",
													"    pm.expect(selectchannel.category).to.eql('shopify');",
													"});",
													"",
													"pm.test(\"Check resposne contains Key shopify\", function () {",
													"pm.expect(selectchannel.key).to.eql('shopify');",
													"});",
													"    ",
													"pm.test(\"Check response contains connectionSchema\", function () {",
													"pm.expect(selectchannel).to.have.property('connectionSchema');",
													"});",
													"",
													"",
													"pm.test(\"Check response contains Category Amazon\", function () {",
													"    pm.expect(selectchannel2.category).to.eql('amazon');",
													"});",
													"",
													"pm.test(\"Check resposne contains Key Amazon\", function () {",
													"pm.expect(selectchannel2.key).to.eql('amazonFresh');",
													"});",
													"    ",
													"pm.test(\"Check response contains connectionSchema\", function () {",
													"pm.expect(selectchannel2).to.have.property('connectionSchema');",
													"});",
													"",
													"if (selectchannel._links && selectchannel.category == \"shopify\" && selectchannel.key == \"shopify\" && selectchannel.connectionSchema && selectchannel2.connectionSchema && selectchannel2.key == \"amazonFresh\" && selectchannel2.category == \"amazon\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22569`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22569`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/channels",
											"host": [
												"{{host}}"
											],
											"path": [
												"channels"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retrieves list of channels to connect to",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03b286c8-3d80-4d8b-b84d-5bd1964e3e1e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c64aa208-ca8e-41a9-a190-fe500a5cca5d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Connections",
					"item": [
						{
							"name": "Post Connections",
							"item": [
								{
									"name": "connections (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdShopify\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response contains correct shopurl\", function() {",
													"    pm.expect(response.parameters.shopUrl).to.eql(\"https://heshamvenzee.myshopify.com\");",
													"});",
													"",
													"",
													"if (response._links && response.id == pm.environment.get(\"connectionIdShopify\") && response.parameters.key == \"shopify\" && response.parameters.shopUrl){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22211`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22211`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"shopify has failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"shopify\", \"shopUrl\": \"https://heshamvenzee.myshopify.com\" }"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdAmazon\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"amazonSellerCentral\");",
													"});",
													"",
													"",
													"if (response._links && response.id == pm.environment.get(\"connectionIdAmazon\") && response.parameters.key == \"amazonSellerCentral\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22211`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22211`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Amazon has failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"amazonSellerCentral\", \"sellerId\" : \"A309B2P6BAXG04\", \"marketplaceId\" : \"ATVPDKIKX0DER\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections with missing key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response must contains Key \", function() {",
													"    pm.expect(response.message).to.eql(\"Missing \\\"key\\\" property\");",
													"});",
													"",
													"",
													"",
													"if (response.message ==\"Missing \\\"key\\\" property\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22617`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22617`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Key is mandatory failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"shopUrl\": \"https://growmup.myshopify.com\" }"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections with missing shopurl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response must contain shopurl\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"shopUrl\");",
													"});",
													"",
													"",
													"",
													"",
													"if (response[0].params.missingProperty ==\"shopUrl\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22617`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22617`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"shopUrl is mandatory failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"shopify\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections with wrong key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													"",
													"pm.test(\"Status code is 502\", function () {",
													"    pm.response.to.have.status(502);",
													"});",
													"",
													"",
													" if (responseCode.code == 502) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22616`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22616`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\" : \"test\", \"shopUrl\": \"https://growmup.myshopify.com\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections (Second shopify to be deleted)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdShopify2\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdShopify2\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response contains correct shopurl\", function() {",
													"    pm.expect(response.parameters.shopUrl).to.eql(\"https://heshamvenzee.myshopify.com\");",
													"});",
													"",
													"",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"shopify\", \"shopUrl\": \"https://heshamvenzee.myshopify.com\" }"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections (Second ASC to be deleted)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1c34a6-ff84-4b06-884b-ed917f369e15",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"connectionIdAmazon2\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for ceonnection ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdAmazon2\"));",
													"});",
													"",
													"pm.test(\"Check response contains correct key\", function() {",
													"    pm.expect(response.parameters.key).to.eql(\"amazonSellerCentral\");",
													"});",
													"",
													"",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"key\": \"amazonSellerCentral\", \"sellerId\" : \"A309B2P6BAXG04\", \"marketplaceId\" : \"ATVPDKIKX0DER\"}"
										},
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								}
							],
							"description": "Creates a new connection.\n\nPrerequisites\nconnection key & shopURL\n\nPost script:\nconId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "922a5f51-2177-4587-89ad-6e66ced182bd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d96cbaa8-b151-4f18-a00e-020c68d89d7b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Connections by ID",
							"item": [
								{
									"name": "connections by ID (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check connection id exists\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check connection has installation links\", function () {",
													"    pm.expect(response._links).to.have.property(\"installStoreApp\");",
													"});",
													"",
													"pm.test(\"Check connection is for shopify\", function () {",
													"    pm.expect(response.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response for connection status\", function () {",
													"    pm.expect(response.status).to.eql(\"connection.requiresInput\");",
													"});",
													"",
													"pm.test(\"Check response contains the right shopurl\", function () {",
													"    pm.expect(response.parameters.shopUrl).to.eql(\"https://heshamvenzee.myshopify.com\");",
													"});",
													"",
													"pm.test(\"Check response contains the right Key\", function () {",
													"    pm.expect(response.parameters.key).to.eql(\"shopify\");",
													"});",
													"",
													"",
													" if (response._links && response.id == pm.environment.get(\"connectionIdShopify\") && response._links.installStoreApp && response.key == \"shopify\" && response.status == \"connection.requiresInput\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22212`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22212`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by ID (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check connection id exists\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check connection has marketplaceId\", function () {",
													"    pm.expect(response.parameters).to.have.property(\"marketplaceId\");",
													"});",
													"",
													"pm.test(\"Check connection has sellerId\", function () {",
													"    pm.expect(response.parameters).to.have.property(\"sellerId\");",
													"});",
													"",
													"pm.test(\"Check connection is for Amazon\", function () {",
													"    pm.expect(response.key).to.eql(\"amazonSellerCentral\");",
													"});",
													"",
													"",
													" if (response._links && response.id == pm.environment.get(\"connectionIdAmazon\") && response.parameters.marketplaceId && response.parameters.sellerId  && response.key ==  \"amazonSellerCentral\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22212`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22212`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\" connection is not found, Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													" if (responseCode.code == 404) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22618`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22618`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreive's connection information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8c1f7d0-ef94-404d-9215-eb1cd22949a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37c9f15e-54c4-468d-975b-4e7fea99fb18",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get connections",
							"item": [
								{
									"name": "connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aadef318-1197-4988-8769-fbbe9a72961c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"var selectconnection = (response._embedded.connections.filter((v) => (v.id === pm.environment.get(\"connectionIdShopify\"))))[0];",
													"",
													"pm.test(\"Check connection id exists\", function () {",
													"    pm.expect(selectconnection.id).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check connection has installation links\", function () {",
													"    pm.expect(selectconnection._links).to.have.property(\"installStoreApp\");",
													"});",
													"",
													"pm.test(\"Check connection is for shopify\", function () {",
													"    pm.expect(selectconnection.key).to.eql(\"shopify\");",
													"});",
													"",
													"pm.test(\"Check response for connection status\", function () {",
													"    pm.expect(selectconnection.status).to.eql(\"connection.requiresInput\");",
													"});",
													"",
													"pm.test(\"Check response contains the right shopurl\", function () {",
													"    pm.expect(selectconnection.parameters).to.have.property(\"shopUrl\");",
													"});",
													"",
													"pm.test(\"Check response contains the right Key\", function () {",
													"    pm.expect(selectconnection.parameters.key).to.eql(\"shopify\");",
													"});",
													"",
													"",
													"if (response._links && selectconnection.parameters.key == \"shopify\" && selectconnection.id == pm.environment.get(\"connectionIdShopify\") && selectconnection._links.installStoreApp && selectconnection.key == \"shopify\" && selectconnection.status == \"connection.requiresInput\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22210`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22210`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }",
													"",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all connections related to this user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4823bce0-fa77-4020-b1e3-d253566b124b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "887a0183-eeec-4e3b-ac89-48939619eb8a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Patch Connections",
							"item": [
								{
									"name": "Connections (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9204ec6d-48fb-45fc-827f-91cbcde22a7a",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check connection id exists\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check connection body data\", function () {",
													"    pm.expect(response._embedded.body[0].op).to.eql(\"add\");",
													"    pm.expect(response._embedded.body[0].path).to.eql(\"/accessToken\");",
													"    pm.expect(response._embedded.body[0].value).to.eql(\"amzn.mws.30ae1d37-3cf4-3323-9023-9d2ef020d812\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\r\n\"op\": \"add\",\r\n\"path\": \"/accessToken\",\r\n\"value\": \"amzn.mws.30ae1d37-3cf4-3323-9023-9d2ef020d812\"\r\n}]"
										},
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Connections",
							"item": [
								{
									"name": "connections by ID (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by ID (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon2}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "connections by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95ef7331-64a3-435a-910f-88d91f59f4ac",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Schema",
					"item": [
						{
							"name": "Get Schemas",
							"item": [
								{
									"name": "schemas (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"const schema = response._embedded.schemas[0];",
													"postman.setEnvironmentVariable(\"schemaIdShopify\", schema.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has HAL Links\", function () {",
													"    pm.expect(response._embedded.schemas[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has ID\", function () {",
													"    pm.expect(response._embedded.schemas[0].id).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response._embedded.schemas[0].key).to.eql(\"shopify\");",
													"});",
													"",
													"if (response._links && response._embedded.schemas[0]._links && response._embedded.schemas[0].id == pm.environment.get(\"schemaIdShopify\") && response._embedded.schemas[0].key == \"shopify\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22213`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22213`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify schema has failed\"})",
													"                        });",
													"    }",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}/schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}",
												"schemas"
											]
										}
									},
									"response": []
								},
								{
									"name": "schemas (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"const schema = response._embedded.schemas[0];",
													"postman.setEnvironmentVariable(\"schemaIdAmazon\", schema.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"",
													"pm.test(\"check that there are count field\", function () {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"pm.test(\"Check response schema has HAL Links\", function () {",
													"    pm.expect(response._embedded.schemas[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema has ID\", function () {",
													"    pm.expect(response._embedded.schemas[0].id).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response._embedded.schemas[0].key).to.eql(\"amazonSellerCentral\");",
													"});",
													"pm.test(\"Check response schema has title\", function () {",
													"    pm.expect(response._embedded.schemas[0].title).to.eql(\"Appliances > Small Kitchen Appliances > Electric Cookware > Cookers\");",
													"    ",
													"    ",
													"});",
													"",
													"",
													"if (response._links && response._embedded.schemas[0]._links && response._embedded.schemas[0].id == pm.environment.get(\"schemaIdAmazon\") && response._embedded.schemas[0].key == \"amazonSellerCentral\" && response._embedded.schemas[0].title == \"Appliances > Small Kitchen Appliances > Electric Cookware > Cookers\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22213`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22213`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon schema has failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}/schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}",
												"schemas"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives a list of schemas\n\nPost Script:\nschemaId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf50305a-c8c8-4ca0-b68d-d9a918b3411b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f457b423-33bd-46f5-9edd-cad4acf41a72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Schemas by ID",
							"item": [
								{
									"name": "schemas by id (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3406bb2f-b112-41cc-bc32-ac03e1fcafb1",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema fields\", function () {",
													"    pm.expect(response.$schema).to.eql(\"http://json-schema.org/draft-07/schema#\");",
													"    pm.expect(response.title).to.eql(\"List of Shopify Products' Source Documents\");",
													"    pm.expect(response.type).to.eql(\"array\");",
													"});",
													"",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response.key).to.eql(\"shopify\");",
													"});",
													"",
													"if (response._links && response.$schema == \"http://json-schema.org/draft-07/schema#\" && response.title == \"List of Shopify Products' Source Documents\" && response.key == \"shopify\" && response.type == \"array\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22214`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22214`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify schema has failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}/schemas/{{schemaIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}",
												"schemas",
												"{{schemaIdShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "schemas by id (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3406bb2f-b112-41cc-bc32-ac03e1fcafb1",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response schema fields\", function () {",
													"    pm.expect(response.$schema).to.eql(\"http://json-schema.org/draft-07/schema#\");",
													"    pm.expect(response.title).to.eql(\"Appliances > Small Kitchen Appliances > Electric Cookware > Cookers\");",
													"    pm.expect(response.type).to.eql(\"array\");",
													"});",
													"",
													"pm.test(\"Check response schema has Key\", function () {",
													"    pm.expect(response.key).to.eql(\"amazonSellerCentral\");",
													"});",
													"",
													"if (response._links && response.$schema == \"http://json-schema.org/draft-07/schema#\" && response.title == \"Appliances > Small Kitchen Appliances > Electric Cookware > Cookers\" && response.key == \"amazonSellerCentral\" && response.type == \"array\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22214`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22214`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon schema has failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdAmazon}}/schemas/{{schemaIdAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdAmazon}}",
												"schemas",
												"{{schemaIdAmazon}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "schemas by invalid connection id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "203708b4-992f-41ca-8cf6-cceba277e6b6",
												"exec": [
													"pm.test(\" connection is not found, Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"if (responseCode.code == 400) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30677`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30677`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"invalid connction ID\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}2/schemas/{{schemaIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}2",
												"schemas",
												"{{schemaIdShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "schemas by invalid schema id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "203708b4-992f-41ca-8cf6-cceba277e6b6",
												"exec": [
													"pm.test(\" schema is not found, Status code is 404\", function () {",
													"    pm.response.to.have.status(502);",
													"});",
													"",
													"if (responseCode.code == 502) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30677`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30677`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"invalid Schema ID\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/connections/{{connectionIdShopify}}/schemas/{{schemaIdShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"connections",
												"{{connectionIdShopify}}",
												"schemas",
												"{{schemaIdShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all info of a schemas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c1e29b-2aaf-4815-b358-82b1abd5fc64",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86e89910-a68d-4415-9af2-1c9bbb8cd266",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Base source document schema ",
					"item": [
						{
							"name": "Post Base source schema",
							"item": [
								{
									"name": "Post base source schema (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e861712f-0c72-4f92-b600-6bdeccbca827",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"baseSrcDocShopify\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for base source document schema ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"baseSrcDocShopify\"));",
													"});",
													"",
													"pm.test(\"Check response contains name field\", function() {",
													"    pm.expect(response).to.have.property(\"name\");",
													"});",
													"",
													"if (response._links && response.id == pm.environment.get(\"baseSrcDocShopify\") && response.name){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30719`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30719`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Shopify is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"shopify source document schema\",\r\n  \"documentRules\": [\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"handle\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"handle\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"vendor\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"vendor\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"title\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"title\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"product_type\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"product_type\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"inventory_policy\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"price\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"size\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"size\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"color\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"color\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"handle\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"variantOf\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"variantOf\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"parent_images\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"parent_images\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n            \"source\": {\r\n                \"attributeName\": \"image\"\r\n            }\r\n        },\r\n        \"targetAttributeName\": \"image\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{host}}/source-document-schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post base source schema (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e861712f-0c72-4f92-b600-6bdeccbca827",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"postman.setEnvironmentVariable(\"baseSrcDocAmazon\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for base source document schema ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"baseSrcDocAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response contains name field\", function() {",
													"    pm.expect(response).to.have.property(\"name\");",
													"});",
													"",
													"if (response._links && response.id == pm.environment.get(\"baseSrcDocAmazon\") && response.name){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30719`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30719`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Amazon is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Test base source schema for Amazon\",\r\n  \"documentRules\": [\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_feed_product_type\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_feed_product_type\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_item_sku\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_item_sku\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_brand_name\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_brand_name\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_item_name\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_item_name\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_external_product_id\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_external_product_id\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_external_product_id_type\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_external_product_id_type\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_item_type\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_item_type\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_standard_price\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_standard_price\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_quantity\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_quantity\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_main_image_url\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_main_image_url\"\r\n    },\r\n    {\r\n      \"key\": \"copy\",\r\n      \"options\": {\r\n        \"source\": {\r\n          \"attributeName\": \"par_parent_child\"\r\n        }\r\n      },\r\n      \"targetAttributeName\": \"parent_parent_child\"\r\n    },\r\n    {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_feed_product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_feed_product_type\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_item_sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_item_sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_brand_name\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_brand_name\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_item_name\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_item_name\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_external_product_id\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_external_product_id\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_external_product_id_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_external_product_id_type\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_item_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_item_type\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_standard_price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_standard_price\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_quantity\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_quantity\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_main_image_url\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_main_image_url\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_parent_child\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_parent_child\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_parent_sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_parent_sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_color_name\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_color_name\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_size_name\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_size_name\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"var_relationship_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"variant_relationship_type\"\r\n      }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{host}}/source-document-schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post base source schema with missing Name field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54423e80-6f6d-44e0-b4ca-b6a66065dd18",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that name is mandatory field\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"name\");",
													"});",
													"",
													"if (response[0].params.missingProperty == \"name\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30720`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30720`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"documentRules\": [\r\n\t\r\n\t{\r\n                    \"key\": \"copy\",\r\n                    \"options\": {\r\n                        \"source\": {\r\n                            \"attributeName\": \"product_type\"\r\n                        }\r\n                    },\r\n                    \"targetAttributeName\": \"product_type\"\r\n\t},{\r\n                    \"key\": \"copy\",\r\n                    \"options\": {\r\n                        \"source\": {\r\n                            \"attributeName\": \"title\"\r\n                        }\r\n                    },\r\n                    \"targetAttributeName\": \"title\"\r\n\t},{\r\n                    \"key\": \"copy\",\r\n                    \"options\": {\r\n                        \"source\": {\r\n                            \"attributeName\": \"handle\"\r\n                        }\r\n                    },\r\n                    \"targetAttributeName\": \"handle\"\r\n\t}\r\n\t\r\n\t]\r\n}"
										},
										"url": {
											"raw": "{{host}}/source-document-schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post base source schema with missing doucmentrule field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6388e533-a9a2-41b0-b2e1-adf13889fd0c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that documentRules is mandatory field\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"documentRules\");",
													"});",
													"",
													"if (response[0].params.missingProperty == \"documentRules\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30720`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30720`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Test base source schema for shopify\"\r\n}"
										},
										"url": {
											"raw": "{{host}}/source-document-schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Base source schema",
							"item": [
								{
									"name": "Get base source schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d64cb663-3d12-481d-95a4-ddc573a36c90",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"var selectconnection = (response._embedded.connections.filter((v) => (v.id === pm.environment.get(\"baseSrcDocShopify\"))))[0];",
													"",
													"pm.test(\"Check response for base source document schema ID\", function() {",
													"    pm.expect(selectconnection.id).to.eql(pm.environment.get(\"baseSrcDocShopify\"));",
													"});",
													"",
													"if (selectconnection.id == pm.environment.get(\"baseSrcDocShopify\")){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30721`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30721`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get base source schema by ID",
							"item": [
								{
									"name": "Get base source schema by ID (shpoify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for base source document schema ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"baseSrcDocShopify\"));",
													"});",
													"",
													"pm.test(\"Check response contains name field\", function() {",
													"    pm.expect(response).to.have.property(\"name\");",
													"});",
													"",
													"if (response._links && response.id == pm.environment.get(\"baseSrcDocShopify\") && response.name){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30722`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1})",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30722`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Shopify is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema by ID (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for base source document schema ID\", function() {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"baseSrcDocAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response contains name field\", function() {",
													"    pm.expect(response).to.have.property(\"name\");",
													"});",
													"",
													"if (response._links && response.id == pm.environment.get(\"baseSrcDocAmazon\") && response.name){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30722`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30722`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Amazon is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocAmazon}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema by ID invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0501ffc4-bfa1-41b0-8bf5-7a01a02567c6",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response error message\", function() {",
													"    pm.expect(response.code).to.eql(\"ResourceNotFoundException\");",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"if (response.code == \"ResourceNotFoundException\" && responseCode.code == 404){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30723`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30723`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Base source schema Document rules",
							"item": [
								{
									"name": "Get base source schema document rules (shpoify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for HAL Links for each rule\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for rule ID\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response for rule field\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"if (response._links && response._embedded.documentRules[0]._links && response._embedded.documentRules[0].id && response._embedded.documentRules[0].rule){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1})",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Shopify is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema document rules (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for HAL Links for each rule\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for rule ID\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response for rule field\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"if (response._links && response._embedded.documentRules[0]._links && response._embedded.documentRules[0].id && response._embedded.documentRules[0].rule){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1})",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Amazon is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema document rules by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0501ffc4-bfa1-41b0-8bf5-7a01a02567c6",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response error message\", function() {",
													"    pm.expect(response.code).to.eql(\"ResourceNotFoundException\");",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"if (response.code == \"ResourceNotFoundException\" && responseCode.code == 400){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30739`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30739`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}2/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}2",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema document rules with offset and limit (shpoify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for HAL Links for each rule\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for rule ID\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response for rule field\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"if (response._links && response._embedded.documentRules[0]._links && response._embedded.documentRules[0].id && response._embedded.documentRules[0].rule){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1})",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Shopify is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/document-rules?limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"document-rules"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get base source schema document rules with offset and limit (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff68867-193c-4bd4-b093-3b80e408d80c",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for HAL Links for each rule\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response for rule ID\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response for rule field\", function() {",
													"    pm.expect(response._embedded.documentRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"if (response._links && response._embedded.documentRules[0]._links && response._embedded.documentRules[0].id && response._embedded.documentRules[0].rule){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1})",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30738`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"Amazon is failing\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocAmazon}}/document-rules?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocAmazon}}",
												"document-rules"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd3e66f2-6208-4d5d-a4be-0745d9071016",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab42738a-9117-44a8-bbda-24f01a744ece",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Hierarchy rules",
					"item": [
						{
							"name": "Post hierarchy rules over source document schema",
							"item": [
								{
									"name": "Post source document schemas hierarchy rules (shopify-nested)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"pm.test(\"Check response has rule ID\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"id\");",
													"});",
													"",
													" if (response._links && response._embedded.hierarchyRules[0].rule && response._embedded.hierarchyRules[0].id){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30731`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30731`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"key\": \"variantParentHierarchy\",\r\n    \"structure\": {\r\n      \"parentIdentifierAttributeName\": \"variantOf\",\r\n      \"variationBy\": [\r\n        {\r\n          \"type\": \"size\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"size\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option1\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"color\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"color\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option2\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"parentRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"variantOf\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"handle\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"vendor\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"vendor\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"title\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"title\"\r\n      },      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"body_html\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"body_html\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"product_type\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"parent_images\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"images\"\r\n      }\r\n    ],\r\n    \"variantRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"inventory_policy\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"image\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"image\"\r\n      }\r\n    ]\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post source document schemas hierarchy rules (ASC-flat)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"pm.test(\"Check response has rule ID\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"id\");",
													"});",
													"",
													" if (response._links && response._embedded.hierarchyRules[0].rule && response._embedded.hierarchyRules[0].id){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30731`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30731`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"key\": \"variantParentHierarchy\",\r\n        \"structure\": {\r\n            \"parentIdentifierAttributeName\": \"variant_parent_sku\",\r\n            \"variationBy\": [\r\n                {\r\n                    \"type\": \"color\",\r\n                    \"rules\": [\r\n                        {\r\n                            \"key\": \"copy\",\r\n                            \"options\": {\r\n                                \"source\": {\r\n                                    \"attributeName\": \"variant_color_name\"\r\n                                }\r\n                            },\r\n                            \"targetAttributeName\": \"color_name\"\r\n                        }\r\n                    ]\r\n                },{\r\n                    \"type\": \"size\",\r\n                    \"rules\": [\r\n                        {\r\n                            \"key\": \"copy\",\r\n                            \"options\": {\r\n                                \"source\": {\r\n                                    \"attributeName\": \"variant_size_name\"\r\n                                }\r\n                            },\r\n                            \"targetAttributeName\": \"size_name\"\r\n                        }\r\n                    ]\r\n                }\r\n                \r\n            ]\r\n        },\r\n        \"parentRules\": [\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_feed_product_type\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"feed_product_type\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_item_sku\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"item_sku\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_brand_name\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"brand_name\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_item_name\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"item_name\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_external_product_id\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"external_product_id\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_external_product_id_type\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"external_product_id_type\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_item_type\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"item_type\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_standard_price\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"standard_price\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_quantity\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"quantity\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_main_image_url\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"main_image_url\"\r\n          },\r\n          {\r\n            \"key\": \"copy\",\r\n            \"options\": {\r\n              \"source\": {\r\n                \"attributeName\": \"parent_parent_child\"\r\n              }\r\n            },\r\n            \"targetAttributeName\": \"parent_child\"\r\n          }\r\n        ],\r\n        \"variantRules\": [\r\n            {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_feed_product_type\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"feed_product_type\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_item_sku\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"item_sku\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_brand_name\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"brand_name\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_item_name\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"item_name\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_external_product_id\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"external_product_id\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_external_product_id_type\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"external_product_id_type\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_item_type\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"item_type\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_standard_price\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"standard_price\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_quantity\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"quantity\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_main_image_url\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"main_image_url\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_parent_child\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"parent_child\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_parent_sku\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"parent_sku\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_color_name\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"color_name\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_size_name\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"size_name\"\r\n              },\r\n              {\r\n                \"key\": \"copy\",\r\n                \"options\": {\r\n                  \"source\": {\r\n                    \"attributeName\": \"variant_relationship_type\"\r\n                  }\r\n                },\r\n                \"targetAttributeName\": \"relationship_type\"\r\n              }\r\n        ]\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocAmazon}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocAmazon}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post source document schemas hierarchy rules with missing key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that key is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"key\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"key\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"missing key is failing\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"structure\": {\r\n      \"parentIdentifierAttributeName\": \"variantOf\",\r\n      \"variationBy\": [\r\n        {\r\n          \"type\": \"size\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"size\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option1\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"color\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"color\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option2\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"parentRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"variantOf\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"handle\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"vendor\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"vendor\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"title\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"title\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"product_type\"\r\n      }\r\n    ],\r\n    \"variantRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"inventory_policy\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n      }\r\n    ]\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post source document schemas hierarchy rules with missing structure",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that structure is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"structure\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"structure\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"missing structure is failing\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n  \t\"key\": \"variantParentHierarchy\",\r\n    \"parentRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"variantOf\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"handle\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"vendor\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"vendor\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"title\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"title\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"product_type\"\r\n      }\r\n    ],\r\n    \"variantRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"inventory_policy\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n      }\r\n    ]\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post source document schemas hierarchy rules with missing source",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that source is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"source\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"source\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30732`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\":\"missing source is failing\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n\t\"key\": \"variantParentHierarchy\",\r\n    \"structure\": {\r\n      \"parentIdentifierAttributeName\": \"variantOf\",\r\n      \"variationBy\": [\r\n        {\r\n          \"type\": \"size\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"size\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option1\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"color\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"color\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option2\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"parentRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n        },\r\n        \"targetAttributeName\": \"handle\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"vendor\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"vendor\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"title\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"title\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"product_type\"\r\n      }\r\n    ],\r\n    \"variantRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"inventory_policy\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n      }\r\n    ]\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post source document schemas hierarchy rules with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e7592be-14f8-411c-bc94-a4e4c38b6436",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check response message\", function() {",
													"    pm.expect(response.code).to.eql(\"ResourceNotFoundException\");",
													"});",
													"",
													"if (response.code == \"ResourceNotFoundException\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30733`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30733`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"key\": \"variantParentHierarchy\",\r\n    \"structure\": {\r\n      \"parentIdentifierAttributeName\": \"variantOf\",\r\n      \"variationBy\": [\r\n        {\r\n          \"type\": \"size\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"size\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option1\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"color\",\r\n          \"rules\": [\r\n            {\r\n              \"key\": \"copy\",\r\n              \"options\": {\r\n                \"source\": {\r\n                  \"attributeName\": \"color\"\r\n                }\r\n              },\r\n              \"targetAttributeName\": \"option2\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"parentRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"variantOf\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"handle\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"vendor\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"vendor\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"title\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"title\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"product_type\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"product_type\"\r\n      }\r\n    ],\r\n    \"variantRules\": [\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"sku\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"sku\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"inventory_policy\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"inventory_policy\"\r\n      },\r\n      {\r\n        \"key\": \"copy\",\r\n        \"options\": {\r\n          \"source\": {\r\n            \"attributeName\": \"price\"\r\n          }\r\n        },\r\n        \"targetAttributeName\": \"price\"\r\n      }\r\n    ]\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}2/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}2",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get hierarchy rules ovr source document schema",
							"item": [
								{
									"name": "Get source document schemas hierarchy rules (shopify-nested)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e1443ed-fb3e-4ec8-8fa1-8355529be453",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"pm.test(\"Check response has rule ID\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response has HAL Links for rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													" if (response._links && response._embedded.hierarchyRules[0].rule && response._embedded.hierarchyRules[0].id){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30734`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30734`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get source document schemas hierarchy rules (ASC-flat)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e1443ed-fb3e-4ec8-8fa1-8355529be453",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"rule\");",
													"});",
													"",
													"pm.test(\"Check response has rule ID\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response has HAL Links for rules\", function () {",
													"    pm.expect(response._embedded.hierarchyRules[0]).to.have.property(\"_links\");",
													"});",
													"",
													" if (response._links && response._embedded.hierarchyRules[0].rule && response._embedded.hierarchyRules[0].id){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30734`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30734`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocAmazon}}/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocAmazon}}",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get source document schemas hierarchy rules with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e49bc8ca-b333-490c-9785-9079792c8408",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check response message\", function() {",
													"    pm.expect(response.code).to.eql(\"ResourceNotFoundException\");",
													"});",
													"",
													"if (response.code == \"ResourceNotFoundException\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30735`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30735`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5 })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/source-document-schemas/{{baseSrcDocShopify}}2/hierarchy-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"source-document-schemas",
												"{{baseSrcDocShopify}}2",
												"hierarchy-rules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Distribution-packages",
					"item": [
						{
							"name": "Post Distribution Packages",
							"item": [
								{
									"name": "distribution-package (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.environment.set(\"distPkgIdShopify\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Shopify\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"",
													"if (response._links && response.documentKey == \"handle\" && response.id == pm.environment.get(\"distPkgIdShopify\") && response.connectionId == pm.environment.get(\"connectionIdShopify\") && response.channelSchemaId == pm.environment.get(\"schemaIdShopify\") ) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22572`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22572`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify distribution packages failed\"})",
													"                        });",
													"    }",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Hesham Shopify\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n    \"baseSourceDocumentSchemaId\" : \"{{baseSrcDocShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdAmazon\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"par_item_sku\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Amazon\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"",
													"});",
													"",
													"",
													"if (response._links && response.documentKey == \"item_sku\" && response.id == pm.environment.get(\"distPkgIdAmazon\") && response.connectionId == pm.environment.get(\"connectionIdAmazon\") && response.channelSchemaId == pm.environment.get(\"schemaIdAmazon\") ) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22572`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22572`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon distribution packages failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Hesham Amazon\",\n    \"documentKey\": \"par_item_sku\",\n    \"connectionId\": \"{{connectionIdAmazon}}\",\n    \"channelSchemaId\": \"{{schemaIdAmazon}}\",\n    \"baseSourceDocumentSchemaId\" : \"{{baseSrcDocAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with name and key only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdkeyonly\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"",
													"",
													"if (response._links && response.documentKey == \"handle\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22207`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22207`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with name and key only and no connectioned added",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"distPkgIdkeyonly2\", response.id);",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test\");",
													"});",
													"",
													"",
													"if (response._links && response.documentKey == \"handle\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22207`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22207`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with missing name field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that name is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"name\");",
													"});",
													"",
													"",
													"if (response[0].params.missingProperty == \"name\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Missing name field\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n\t\"baseSourceDocumentSchemaId\": \"bi123456789012345678901234567890\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package  with missing documentkey field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that documentKey is mandatory\", function() {",
													"    pm.expect(response[0].params.missingProperty).to.eql(\"documentKey\");",
													"});",
													"",
													"",
													"if (response[0].params.missingProperty == \"documentKey\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Missing documentKey field\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n\t\"baseSourceDocumentSchemaId\": \"bi123456789012345678901234567890\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package  with missing connectionId field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													"pm.test(\"Status code is 400 bad request, connection with ID undefined\", function () {",
													"    pm.response.to.have.status(400);",
													"",
													"});",
													"",
													"",
													"",
													"if (responseCode.code == 400) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Missing ConnectionId field and schemaID exists\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n\t\"baseSourceDocumentSchemaId\": \"bi123456789012345678901234567890\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package  with missing schemaId field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													"pm.test(\"Status code is 400 bad request, schema with ID undefined\", function () {",
													"    pm.response.to.have.status(400);",
													"",
													"});",
													"",
													"if (responseCode.code == 400) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22620`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Missing SchemaId field and connectionId exists\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with invalid connection ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check connection ID Patter\", function() {",
													"    pm.expect(response[0].params.pattern).to.eql(\"^[a-z0-9]{32}$\");",
													"});",
													"",
													"pm.test(\"invalid connection ID pattern\", function() {",
													"    pm.expect(response[0].dataPath).to.eql(\".connectionId\");",
													"});",
													"",
													"if (response[0].dataPath == \".connectionId\" && response[0].params.pattern == \"^[a-z0-9]{32}$\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Invalid connectionId\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}2\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n\t\"baseSourceDocumentSchemaId\": \"bi123456789012345678901234567890\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with invalid schema ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check schema ID pattern\", function() {",
													"    pm.expect(response[0].params.pattern).to.eql(\"^[a-z0-9]{32}$\");",
													"});",
													"",
													"pm.test(\"invalid schema ID pattern\", function() {",
													"    pm.expect(response[0].dataPath).to.eql(\".channelSchemaId\");",
													"});",
													"",
													"if (response[0].dataPath == \".channelSchemaId\" && response[0].params.pattern == \"^[a-z0-9]{32}$\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Invalid SchemaId\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}2\",\n\t\"baseSourceDocumentSchemaId\": \"bi123456789012345678901234567890\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-package with invalid Baseschema ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f657e007-5e3f-49c3-8ba5-a111c1b66313",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check schema ID pattern\", function() {",
													"    pm.expect(response[0].params.pattern).to.eql(\"^[a-z0-9]{32}$\");",
													"});",
													"",
													"pm.test(\"invalid schema ID pattern\", function() {",
													"    pm.expect(response[0].dataPath).to.eql(\".baseSourceDocumentSchemaId\");",
													"});",
													"",
													"if (response[0].dataPath == \".baseSourceSchemaId\" && response[0].params.pattern == \"^[a-z0-9]{32}$\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22209`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Invalid BaseSchemaId\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test\",\n    \"documentKey\": \"handle\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n\t\"baseSourceDocumentSchemaId\": \"bi1234567890123456789012345678902\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								}
							],
							"description": "Creates a distribution package\n\nPrerequisite:\nConid\nschemaId\n\nPost Script:\ndpId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a89378ab-aabd-446e-8fc8-197a30e84c8c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f76eb4ed-5f3b-42f7-8b11-e1c1e5653929",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Distribution Packages by ID",
							"item": [
								{
									"name": "distribution-packages by ID (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Shopify\");",
													"});",
													"",
													"pm.test(\"Check response has connectionId\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaId\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"",
													"if (response.id == pm.environment.get(\"distPkgIdShopify\") && response.name == \"Hesham Shopify\" && response.connectionId == pm.environment.get(\"connectionIdShopify\") && response.channelSchemaId == pm.environment.get(\"schemaIdShopify\")) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22571`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22571`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-packages by ID (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"item_sku\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response.id).to.eql(pm.environment.get(\"distPkgIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Amazon\");",
													"});",
													"",
													"pm.test(\"Check response has connectionId\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaId\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});",
													"",
													"",
													"if (response.id == pm.environment.get(\"distPkgIdAmazon\") && response.name == \"Hesham Amazon\" && response.connectionId == pm.environment.get(\"connectionIdAmazon\") && response.channelSchemaId == pm.environment.get(\"schemaIdAmazon\")) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22571`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22571`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "distribution-packages by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b25a114a-fd2b-4158-9fb0-e8bc0c33fcfc",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check distribution package is not found\", function () {",
													"    pm.expect(response.code).to.eql(\"ResourceNotFoundException\");",
													"});",
													"",
													"",
													"if (response.code == \"ResourceNotFoundException\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22619`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22619`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Missing SchemaId field and connectionId exists\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}2",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}2"
											]
										}
									},
									"response": []
								}
							],
							"description": "retrieves all information of distribution package\n\nPrerequisite:\ndpId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49334aee-c7b0-474d-97e0-701b0f6f6501",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "126296e9-1d84-4353-9a2f-640f9cf3123a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Distribution Packages ",
							"item": [
								{
									"name": "distribution-packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e95043da-5800-45c9-9b23-9579765266fb",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"var selectpackage = (response._embedded.distributionPackages.filter((v) => (v.id === pm.environment.get(\"distPkgIdShopify\"))))[0];",
													"",
													"pm.test(\"Check response contains HAL Links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check package id exists\", function () {",
													"    pm.expect(selectpackage.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has HAL links\", function () {",
													"    pm.expect(selectpackage).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check package has connectionid\", function () {",
													"    pm.expect(selectpackage.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has document key\", function () {",
													"    pm.expect(selectpackage.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check package has Schema id\", function () {",
													"    pm.expect(selectpackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check package has the correct name\", function () {",
													"    pm.expect(selectpackage.name).to.eql(\"Hesham Shopify\");",
													"});",
													"",
													"",
													"if (response._links && selectpackage.id  == pm.environment.get(\"distPkgIdShopify\") && selectpackage._links && selectpackage.connectionId == pm.environment.get(\"connectionIdShopify\") && selectpackage.channelSchemaId == pm.environment.get(\"schemaIdShopify\")) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22570`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22570`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages"
											]
										}
									},
									"response": []
								}
							],
							"description": "retreives all info of a distribution package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab582454-97f8-4eca-9559-8119629f6ae4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "343b25c6-22f1-4dd6-8bd6-8cc35606a29f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Patch Distribution-packages",
							"item": [
								{
									"name": "Distribution-packages (adding connection and schema)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6179e4a-b5c6-445b-8921-f2ac709b0dd0",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response).to.have.property(\"id\");",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response.name).to.eql(\"Hesham Test edited\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"",
													"if (response._links && response.documentKey  == \"handle\" && response.id && response.connectionId == pm.environment.get(\"connectionIdShopify\") && response.channelSchemaId == pm.environment.get(\"schemaIdShopify\")) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22208`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22208`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test edited\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\"}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Distribution-packages with edit to document key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a33464d0-1312-40f7-95a2-1c9b3950a9fd",
												"exec": [
													"pm.test(\"Status code is 400 cannot edit documentKey\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"if (responseCode.code == 400) {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30678`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30678`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"editing Document Key field failed\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test edited\",\n    \"connectionId\": \"b03973adfc714fe2ba8476dd89edited\",\n    \"channelSchemaId\": \"bi123456789012345678901234edited\",\n    \"baseSourceSchemaId\": \"bi123456789012345678901234edited\",\n    \"documentKey\": \"sku2\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Distribution-packages adding another field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6179e4a-b5c6-445b-8921-f2ac709b0dd0",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check cannot add additional field\", function () {",
													"    pm.expect(response[0].message).to.eql(\"should NOT have additional properties\");",
													"});",
													"",
													"",
													"if (response[0].message == \"should NOT have additional properties\") {",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30678`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30678`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"adding a test field failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Hesham Test edited\",\n    \"connectionId\": \"{{connectionIdShopify}}\",\n    \"channelSchemaId\": \"{{schemaIdShopify}}\",\n    \"baseSourceSchemaId\": \"bi123456789012345678901234edited\",\n    \"test\":\"test\"\n}"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdkeyonly}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Document-rules",
					"item": [
						{
							"name": "Post Document rules",
							"item": [
								{
									"name": "document rules (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check HAL Links exists\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"check Document Rule Key\", function () {",
													"pm.expect(response._embedded.documentRules[0].rule.key).to.eql(\"copy\");",
													"});",
													"",
													" if (response._links && response._embedded.documentRules[0].rule.key == \"copy\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30680`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30680`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" :\"Shopify document rules failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t\n\t{\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"product_type\"\n                        }\n                    },\n                    \"targetAttributeName\": \"product_type\"\n\t},{\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"title\"\n                        }\n                    },\n                    \"targetAttributeName\": \"title\"\n\t},{\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"handle\"\n                        }\n                    },\n                    \"targetAttributeName\": \"handle\"\n\t}\n\t\n\t]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check HAL Links exists\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"check Document Rule Key\", function () {",
													"pm.expect(response._embedded.documentRules[0].rule.key).to.eql(\"copy\");",
													"});",
													"",
													" if (response._links && response._embedded.documentRules[0].rule.key == \"copy\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30680`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30680`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" :\"Amazon document rules failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"feed_product_type\"\n                        }\n                    },\n                    \"targetAttributeName\": \"feed_product_type\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"item_sku\"\n                        }\n                    },\n                    \"targetAttributeName\": \"item_sku\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"brand_name\"\n                        }\n                    },\n                    \"targetAttributeName\": \"brand_name\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"item_name\"\n                        }\n                    },\n                    \"targetAttributeName\": \"item_name\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"external_product_id\"\n                        }\n                    },\n                    \"targetAttributeName\": \"external_product_id\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"external_product_id_type\"\n                        }\n                    },\n                    \"targetAttributeName\": \"external_product_id_type\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"item_type\"\n                        }\n                    },\n                    \"targetAttributeName\": \"item_type\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"standard_price\"\n                        }\n                    },\n                    \"targetAttributeName\": \"standard_price\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"quantity\"\n                        }\n                    },\n                    \"targetAttributeName\": \"quantity\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"main_image_url\"\n                        }\n                    },\n                    \"targetAttributeName\": \"main_image_url\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"parent_child\"\n                        }\n                    },\n                    \"targetAttributeName\": \"parent_child\"\n     },\n     {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"variation_theme\"\n                        }\n                    },\n                    \"targetAttributeName\": \"variation_theme\"\n     }\n\t]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules with missing target attribute name field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that targetAttributeName is a mandatory field\", function () {",
													"    pm.expect(response[0].params.missingProperty).to.eql (\"targetAttributeName\");",
													"});",
													"",
													"",
													" if (response[0].params.missingProperty == \"targetAttributeName\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" :\"targetAttfibuteName is mandatory field failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"Product Type\"\n                        }\n                    }\n     }\n\t]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules with missing attribute name field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that attributeName is a mandatory field\", function () {",
													"    pm.expect(response[0].params.missingProperty).to.eql (\"attributeName\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"attributeName\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" :\"attributeName is mandatory field failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t {\n                    \"key\": \"copy\",\n                    \"options\": {\n                        \"source\": {\n                        }\n                    },\n                    \"targetAttributeName\": \"Product Type\"\n     }\n\t]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules with missing target attribute name field Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that key is a mandatory field\", function () {",
													"    pm.expect(response[0].params.missingProperty).to.eql (\"key\");",
													"});",
													"",
													" if (response[0].params.missingProperty == \"key\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30681`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" :\"key is mandatory field failed\" })",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t {\n                    \"options\": {\n                        \"source\": {\n                            \"attributeName\": \"Product Type\"\n                        }\n                    },\n                    \"targetAttributeName\": \"Product Type\"\n     }\n\t]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Document rules",
							"item": [
								{
									"name": "document rules (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check HAL Links exists\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"check Document Rule Key\", function () {",
													"pm.expect(response._embedded.documentRules[0].rule.key).to.eql(\"copy\");",
													"});",
													"",
													" if (response._links && response._embedded.documentRules[0].rule.key == \"copy\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30682`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30682`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check HAL Links exists\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"check Document Rule Key\", function () {",
													"pm.expect(response._embedded.documentRules[0].rule.key).to.eql(\"copy\");",
													"});",
													"",
													" if (response._links && response._embedded.documentRules[0].rule.key == \"copy\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30682`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30682`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document ruels by invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b25a114a-fd2b-4158-9fb0-e8bc0c33fcfc",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check documnt count is 0\", function () {",
													"    pm.expect(response.count).to.eql(0);",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}2/document-rules",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}2",
												"document-rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "document rules with offset & limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd583115-e70b-4f07-8ea9-f05265628187",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check HAL Links exists\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"check Document Rule Key\", function () {",
													"pm.expect(response._embedded.documentRules[0].rule.key).to.eql(\"copy\");",
													"});",
													"",
													" if (response._links && response._embedded.documentRules[0].rule.key == \"copy\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30683`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30683`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/document-rules?offset=1&limit=3",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"document-rules"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "3"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "retrieves all information of distribution package\n\nPrerequisite:\ndpId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49334aee-c7b0-474d-97e0-701b0f6f6501",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "126296e9-1d84-4353-9a2f-640f9cf3123a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Source Document",
					"item": [
						{
							"name": "Put Source documents",
							"item": [
								{
									"name": "source-documents (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ced88233-3336-4ca2-8638-87a107e1dc9a",
												"exec": [
													"pm.test(\"Status code is 202 Accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													" if (responseCode.code == 202){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22206`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22206`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify documents failed\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"document\": {\r\n      \"handle\": \"5d23be466662d4ef06696971\",\r\n      \"title\": \"fugiat ea\",\r\n      \"product_type\": \"Cars\",\r\n      \"vendor\": \"Some Vendor\",\r\n      \"body_html\": \"Cupidatat consectetur commodo reprehenderit laborum quis pariatur anim aliqua laboris. Pariatur proident nulla occaecat dolore proident id ea et consectetur Lorem. Ipsum ut commodo consequat irure anim ad ea culpa occaecat. Fugiat ullamco id elit voluptate Lorem culpa tempor sint elit officia exercitation. Consectetur exercitation enim id ad labore et officia magna tempor ex nisi voluptate anim proident. Eiusmod laboris laboris nisi incididunt sit do ex ullamco sint veniam tempor enim cupidatat aute. Nulla cillum occaecat deserunt ipsum eu est aliquip ea exercitation et nostrud dolor sint. Excepteur cillum dolore cupidatat laborum nostrud sunt enim elit nulla consequat fugiat dolore. Velit veniam id aute magna nisi ad laborum Lorem duis minim sint. Lorem laborum pariatur laboris sint proident laboris sit ad qui ipsum excepteur.\",\r\n      \"tags\": \"voluptate,officia\",\r\n      \"published\": true,\r\n      \"published_scope\": \"web\",\r\n      \"size\": \"large\",\r\n      \"color\": \"black\",\r\n      \"parent_images\": [\r\n        {\r\n          \"src\": \"https://picsum.photos/id/293/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/895/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/972/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/855/200/200\"\r\n        }\r\n      ],\r\n      \"image\": {\r\n        \"src\": \"https://picsum.photos/id/895/200/200\"\r\n      },\r\n      \"variantOf\": \"5d23be466662d4ef06696972\",\r\n      \"inventory_policy\": \"continue\",\r\n      \"price\": 100\r\n    },\r\n    \"action\": \"upsert\"\r\n  },\r\n  {\r\n    \"document\": {\r\n      \"handle\": \"5d23be462b05a994e80ed75d\",\r\n      \"title\": \"esse dolor\",\r\n      \"product_type\": \"Electronics\",\r\n      \"vendor\": \"Vendor\",\r\n      \"body_html\": \"Elit sit deserunt deserunt sit. Lorem enim laboris dolore pariatur sint do cillum nisi non proident ex. Enim magna officia ipsum aute velit. Aute ut nulla ullamco magna magna deserunt eiusmod sint. Exercitation incididunt ullamco laboris officia. Nostrud commodo ut dolore deserunt voluptate aliqua ea dolore aliqua esse aliquip qui. Nisi ea consectetur incididunt excepteur magna deserunt nulla exercitation duis non laboris non ipsum. Magna proident tempor ullamco deserunt cupidatat elit tempor amet eiusmod. Occaecat enim nostrud quis pariatur ipsum consequat proident. Ex amet aliquip do voluptate officia duis velit enim do elit cupidatat dolore.\",\r\n      \"size\": \"small\",\r\n      \"color\": \"black\",\r\n      \"tags\": \"officia,nostrud\",\r\n      \"published\": true,\r\n      \"published_scope\": \"global\",\r\n      \"parent_images\": [\r\n        {\r\n          \"src\": \"https://picsum.photos/id/293/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/895/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/972/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/855/200/200\"\r\n        }\r\n      ],\r\n      \"image\": {\r\n        \"src\": \"https://picsum.photos/id/972/200/200\"\r\n      },\r\n      \"variantOf\": \"5d23be466662d4ef06696972\",\r\n      \"inventory_policy\": \"continue\",\r\n      \"price\": 101\r\n    },\r\n    \"action\": \"upsert\"\r\n  },\r\n  {\r\n    \"document\": {\r\n      \"handle\": \"5d23be468ad776bbd1fc1f03\",\r\n      \"title\": \"cillum sunt\",\r\n      \"product_type\": \"Machinery\",\r\n      \"vendor\": \"Some Other Vendor\",\r\n      \"body_html\": \"Sint cupidatat eiusmod culpa commodo amet culpa elit sint ea laboris velit. Ullamco exercitation amet sint magna adipisicing nostrud Lorem consequat ad do in dolor ullamco. Ipsum occaecat Lorem qui voluptate ullamco. Deserunt qui magna dolor consequat elit. Exercitation ea voluptate ullamco duis dolor quis ea magna elit Lorem. Aute eu ut voluptate adipisicing laboris deserunt nisi irure ad. Aliqua dolore minim eiusmod nisi non irure adipisicing eu occaecat. Ullamco ad nostrud elit sit reprehenderit reprehenderit reprehenderit in sint culpa dolor minim laborum. Non dolore elit laborum nostrud elit. Ex laborum nisi aliquip ipsum nostrud proident occaecat deserunt fugiat voluptate.\",\r\n      \"size\": \"medium\",\r\n      \"color\": \"black\",\r\n      \"tags\": \"veniam,commodo\",\r\n      \"published\": false,\r\n      \"published_scope\": \"global\",\r\n      \"parent_images\": [\r\n        {\r\n          \"src\": \"https://picsum.photos/id/293/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/895/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/972/200/200\"\r\n        },\r\n        {\r\n          \"src\": \"https://picsum.photos/id/855/200/200\"\r\n        }\r\n      ],\r\n      \"image\": {\r\n        \"src\": \"https://picsum.photos/id/855/200/200\"\r\n      },\r\n      \"variantOf\": \"5d23be466662d4ef06696972\",\r\n      \"inventory_policy\": \"continue\",\r\n      \"price\": 102\r\n    },\r\n    \"action\": \"upsert\"\r\n  },\r\n  {\r\n    \"document\": {\r\n      \"handle\": \"5d23be4697b88095db8a218f\",\r\n      \"title\": \"reprehenderit pariatur\",\r\n      \"product_type\": \"Cars\",\r\n      \"vendor\": \"Vendor\",\r\n      \"body_html\": \"Ea excepteur in ut cillum. Anim occaecat anim culpa ipsum anim. Ut proident excepteur ut dolore labore ea excepteur dolore anim anim ipsum labore sint dolore. Commodo excepteur sint incididunt ad tempor nisi. Eiusmod magna ullamco laborum ad cillum exercitation deserunt. Ut ad ex elit fugiat non consequat sunt esse enim. In aliquip ipsum ad et anim voluptate in occaecat consectetur voluptate. Voluptate laboris Lorem do do dolore aliquip. Enim eiusmod ut occaecat occaecat. Exercitation sint est id do enim labore incididunt deserunt aliquip ea irure culpa excepteur.\",\r\n      \"size\": \"small\",\r\n      \"color\": \"red\",\r\n      \"tags\": \"reprehenderit,laboris\",\r\n      \"published\": true,\r\n      \"published_scope\": \"web\",\r\n      \"parent_images\": [\r\n        {\r\n          \"src\": \"https://picsum.photos/id/822/200/200\"\r\n        }\r\n      ],\r\n      \"image\":{\r\n        \"src\": \"https://picsum.photos/id/822/200/200\"\r\n      },\r\n      \"variantOf\": \"5d23be466662d4ef06696973\",\r\n      \"inventory_policy\": \"continue\",\r\n      \"price\": 103\r\n    },\r\n    \"action\": \"upsert\"\r\n  },\r\n  {\r\n    \"document\": {\r\n      \"handle\": \"5d23be4697b88hsgeb8a218f\",\r\n      \"title\": \"reprehenderit pariatur\",\r\n      \"product_type\": \"Cars\",\r\n      \"vendor\": \"Vendor\",\r\n      \"body_html\": \"Ea excepteur in ut cillum. Anim occaecat anim culpa ipsum anim. Ut proident excepteur ut dolore labore ea excepteur dolore anim anim ipsum labore sint dolore. Commodo excepteur sint incididunt ad tempor nisi. Eiusmod magna ullamco laborum ad cillum exercitation deserunt. Ut ad ex elit fugiat non consequat sunt esse enim. In aliquip ipsum ad et anim voluptate in occaecat consectetur voluptate. Voluptate laboris Lorem do do dolore aliquip. Enim eiusmod ut occaecat occaecat. Exercitation sint est id do enim labore incididunt deserunt aliquip ea irure culpa excepteur.\",\r\n      \"size\": \"medium\",\r\n      \"color\": \"red\",\r\n      \"tags\": \"reprehenderit,laboris\",\r\n      \"published\": true,\r\n      \"published_scope\": \"web\",\r\n      \"parent_images\": [\r\n        {\r\n          \"src\": \"https://picsum.photos/id/822/200/200\"\r\n        }\r\n      ],\r\n      \"image\":{\r\n        \"src\": \"https://picsum.photos/id/822/200/200\"\r\n      },\r\n      \"variantOf\": \"5d23be466662d4ef06696973\",\r\n      \"inventory_policy\": \"continue\",\r\n      \"price\": 104\r\n    },\r\n    \"action\": \"upsert\"\r\n  }\r\n]"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "source-documents (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ced88233-3336-4ca2-8638-87a107e1dc9a",
												"exec": [
													"pm.test(\"Status code is 202 Accepted\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													" if (responseCode.code == 202){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22206`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22206`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon documents failed\"})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"document\": {\r\n      \"par_feed_product_type\": \"smallhomeappliances\",\r\n      \"par_item_sku\": \"UYGIDSG6546ysss\",\r\n      \"par_brand_name\": \"Brand name here\",\r\n      \"par_item_name\": \"Some product title here\",\r\n      \"par_external_product_id\": \"5283074041956\",\r\n      \"par_external_product_id_type\": \"UPC\",\r\n      \"par_item_type\": \"electric-pressure-cookers\",\r\n      \"par_standard_price\": 1408,\r\n      \"par_quantity\": 1888,\r\n      \"par_main_image_url\": \"https://loremflickr.com/g/320/240/paris\",\r\n      \"par_parent_child\": \"Parent\",\r\n      \"var_feed_product_type\": \"smallhomeappliances\",\r\n      \"var_item_sku\": \"UYGIDSG6546tefl\",\r\n      \"var_brand_name\": \"Brand name here\",\r\n      \"var_item_name\": \"Red variant Some product title here\",\r\n      \"var_external_product_id\": \"5283074042298\",\r\n      \"var_external_product_id_type\": \"UPC\",\r\n      \"var_item_type\": \"electric-pressure-cookers\",\r\n      \"var_standard_price\": 1200,\r\n      \"var_quantity\": 1000,\r\n      \"var_main_image_url\": \"https://timedotcom.files.wordpress.com/2015/06/521811839-copy.jpg\",\r\n      \"var_parent_child\": \"Child\",\r\n      \"var_parent_sku\": \"UYGIDSG6546ysss\",\r\n      \"var_color_name\": \"Red\",\r\n      \"var_size_name\":\"small\",\r\n      \"var_relationship_type\": \"Variation\"\r\n    },\r\n    \"action\": \"upsert\"\r\n  }\r\n]\t"
										},
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"source-documents"
											]
										}
									},
									"response": []
								}
							],
							"description": "adds/deletes a document(s) to a distribution package\n\nPrerequisite:\ndpid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a434793d-9a03-4d70-8dd7-fd683607d5ab",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5f40962-2edd-431f-ae71-5572cda45c83",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Soruce Documents",
							"item": [
								{
									"name": "Source document (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d890e5-6994-413f-8b10-248784300f24",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response has HAL links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has source documents\", function () {",
													"    pm.expect(response._embedded).to.have.property(\"sourceDocuments\");",
													"});",
													"",
													"",
													"if (response._links && response._embedded.sourceDocuments){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22573`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22573`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Source document (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d890e5-6994-413f-8b10-248784300f24",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response has HAL links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has source documents\", function () {",
													"    pm.expect(response._embedded).to.have.property(\"sourceDocuments\");",
													"});",
													"",
													"",
													"if (response._links && response._embedded.sourceDocuments){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22573`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/22573`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/source-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdAmazon}}",
												"source-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "source-documents with low offset & limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0697c2f-483e-4637-a26d-5e166384db44",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response has HAL links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has source documents\", function () {",
													"    pm.expect(response._embedded).to.have.property(\"sourceDocuments\");",
													"});",
													"",
													"pm.test(\"Check response count = 1 as the limit\", function () {",
													"    pm.expect(response.count).to.eql(1);",
													"});",
													"",
													"if (response._links && response._embedded.sourceDocuments && response.count == 1){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30679`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30679`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Low offset & limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "source-documents with high offset & limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0697c2f-483e-4637-a26d-5e166384db44",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response has HAL links\", function () {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has source documents\", function () {",
													"    pm.expect(response._embedded).to.have.property(\"sourceDocuments\");",
													"});",
													"",
													"if (response._links && response._embedded.sourceDocuments){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30679`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30679`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"High offset and limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/source-documents?offset=0&limit=600",
											"host": [
												"{{host}}"
											],
											"path": [
												"distribution-packages",
												"{{distPkgIdShopify}}",
												"source-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "600"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "retreives all the source documents for a distribution package.\n\nPrerequisite: \ndpId ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1b3c948-a543-467c-9447-68bc53647720",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a24eae2-cadd-455b-ac26-ba2ae2f594bb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Attribute relationships",
					"item": [
						{
							"name": "Get Attribute relationships (Shopify)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
										"exec": [
											" try{",
											"const response = pm.response.json()",
											"",
											"",
											"pm.test(\"Check response for target attribute name\", function () {",
											"    pm.expect(response[0]).to.have.property(\"targetAttributeName\");",
											"});",
											"",
											"pm.test(\"Check response has schema field\", function () {",
											"    pm.expect(response[0]).to.have.property(\"schema\");",
											"});",
											"",
											"if (response[0].targetAttributeName && response[0].schema) {",
											" ",
											"    pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30727`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"    },",
											"    body: JSON.stringify({ \"status_id\": 1 })",
											"});",
											"}",
											"else {",
											"        pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30727`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"            },",
											"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify schema has failed\"})",
											"                        });",
											"    }",
											"}",
											"  catch(err) {console.log(err);}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenantaccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}/attribute-relationships",
									"host": [
										"{{host}}"
									],
									"path": [
										"distribution-packages",
										"{{distPkgIdShopify}}",
										"attribute-relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Attribute relationships (Amazon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
										"exec": [
											" try{",
											"const response = pm.response.json()",
											"",
											"",
											"pm.test(\"Check response for target attribute name\", function () {",
											"    pm.expect(response[0]).to.have.property(\"targetAttributeName\");",
											"});",
											"",
											"pm.test(\"Check response has schema field\", function () {",
											"    pm.expect(response[0]).to.have.property(\"schema\");",
											"});",
											"",
											"if (response[0].targetAttributeName && response[0].schema) {",
											" ",
											"    pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30727`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"    },",
											"    body: JSON.stringify({ \"status_id\": 1 })",
											"});",
											"}",
											"else {",
											"        pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30727`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"            },",
											"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon schema has failed\"})",
											"                        });",
											"    }",
											"}",
											"  catch(err) {console.log(err);}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenantaccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/distribution-packages/{{distPkgIdAmazon}}/attribute-relationships",
									"host": [
										"{{host}}"
									],
									"path": [
										"distribution-packages",
										"{{distPkgIdAmazon}}",
										"attribute-relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Attribute relationships with invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
										"exec": [
											" try{",
											"const response = pm.response.json()",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response message\", function() {",
											"    pm.expect(response).to.have.property(\"message\");",
											"});",
											"",
											"if (response.message && responseCode.code == 400) {",
											" ",
											"    pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30729`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"    },",
											"    body: JSON.stringify({ \"status_id\": 1 })",
											"});",
											"}",
											"else {",
											"        pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30729`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"            },",
											"    body: JSON.stringify({ \"status_id\": 5})",
											"                        });",
											"    }",
											"}",
											"  catch(err) {console.log(err);}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenantaccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/distribution-packages/{{distPkgIdShopify}}2/attribute-relationships",
									"host": [
										"{{host}}"
									],
									"path": [
										"distribution-packages",
										"{{distPkgIdShopify}}2",
										"attribute-relationships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Attribute relationships with distribution-package that has no connectionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272cd601-87df-4ff2-96d9-e84ca56a5288",
										"exec": [
											" try{",
											"const response = pm.response.json()",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"if (responseCode.code == 400) {",
											" ",
											"    pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30729`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"    },",
											"    body: JSON.stringify({ \"status_id\": 1 })",
											"});",
											"}",
											"else {",
											"        pm.sendRequest({",
											"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30729`,",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
											"            },",
											"    body: JSON.stringify({ \"status_id\": 5})",
											"                        });",
											"    }",
											"}",
											"  catch(err) {console.log(err);}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tenantaccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/distribution-packages/{{distPkgIdkeyonly2}}/attribute-relationships",
									"host": [
										"{{host}}"
									],
									"path": [
										"distribution-packages",
										"{{distPkgIdkeyonly2}}",
										"attribute-relationships"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Staged-releases",
					"item": [
						{
							"name": "Post staged-releases",
							"item": [
								{
									"name": "Post staged-releases (Shopify)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fad2ceb3-e777-4540-8eda-34860d87ecf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fcdf897-3896-445a-b18b-e5826f256573",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"stagedrelasesIdShopify\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response._embedded.distributionPackage.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response._embedded.distributionPackage.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response._embedded.distributionPackage.name).to.eql(\"Hesham Shopify\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"",
													"pm.test(\"Check status\", function () {",
													"    pm.expect(response.status).to.eql(\"staging\");",
													"});",
													"",
													"pm.test(\"Check type\", function () {",
													"    pm.expect(response.type).to.eql(\"staging\");",
													"});",
													"",
													"if (response._links && response._embedded.distributionPackage.documentKey == \"handle\" && response._embedded.distributionPackage.id == pm.environment.get(\"distPkgIdShopify\") && response._embedded.distributionPackage.connectionId ==  pm.environment.get(\"connectionIdShopify\") && response._embedded.distributionPackage.channelSchemaId == pm.environment.get(\"schemaIdShopify\")){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30684`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30684`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify staged-releases failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/staged-releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post staged-releases (ASC)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fad2ceb3-e777-4540-8eda-34860d87ecf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fcdf897-3896-445a-b18b-e5826f256573",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"stagedrelasesIdAmazon\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response._embedded.distributionPackage.documentKey).to.eql(\"par_item_sku\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response._embedded.distributionPackage.id).to.eql(pm.environment.get(\"distPkgIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response._embedded.distributionPackage.name).to.eql(\"Hesham Amazon\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.connectionId).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check status\", function () {",
													"    pm.expect(response.status).to.eql(\"staging\");",
													"});",
													"",
													"pm.test(\"Check type\", function () {",
													"    pm.expect(response.type).to.eql(\"staging\");",
													"});",
													"",
													"",
													"if (response._links && response._embedded.distributionPackage.documentKey == \"item_sku\" && response._embedded.distributionPackage.id == pm.environment.get(\"distPkgIdAmazon\") && response._embedded.distributionPackage.connectionId ==  pm.environment.get(\"connectionIdAmazon\") && response._embedded.distributionPackage.channelSchemaId == pm.environment.get(\"schemaIdAmazon\")){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30684`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30684`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon staged-releases failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/staged-releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post staged-releases with invalid id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fad2ceb3-e777-4540-8eda-34860d87ecf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6fcdf897-3896-445a-b18b-e5826f256573",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													"if (responseCode.code == 404){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30687`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30687`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}2\"\n}"
										},
										"url": {
											"raw": "{{host}}/staged-releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Staged-releases",
							"item": [
								{
									"name": "Get all staged-releases results (shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae1715e-ddef-4c57-ae03-ff44e1e02eb1",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"pm.test(\"Check response contains results field\", function() {",
													"    pm.expect(response._embedded).to.have.property(\"results\");",
													"});",
													"",
													"",
													"if (response._links && response.count && response._embedded.results[0] ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30689`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30689`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify all results failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (Shopify valid-documents only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc761734-0330-4e35-b7f3-e73a74d51467",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify valid documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/valid-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"valid-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (Shopify errors only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2a232aa-9318-4e67-aa65-77470c4f7c8f",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with low offset and limit (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca4e82e-b667-427e-ad9e-2a86efa9117d",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response.count).to.be.below(2);",
													"});",
													"",
													"",
													"if (response._links && response.count <= 1){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents with low limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/errors?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"errors"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with High offset and limit (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "299799cf-c663-46c1-b957-57dcaea8f911",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents with high offset failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdShopify}}/results/errors?offset=0&limit=600",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdShopify}}",
												"results",
												"errors"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "600"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01958206-1585-44ce-aa37-a582696a0149",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"pm.test(\"Check response contains results field\", function() {",
													"    pm.expect(response._embedded).to.have.property(\"results\");",
													"});",
													"",
													"",
													"if (response._links && response.count && response._embedded.results[0] ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30689`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30689`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon all results failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC valid-documents only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "479331f2-115a-4792-868b-ec832cfee993",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon valid documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/valid-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"valid-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results (ASC errors only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0a70431-7d54-4b0a-af38-45eba5839b76",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count >= 0){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30690`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with low offset and limit (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c898f1-d496-4e40-ad6c-d104b6ab27bf",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response.count).to.be.below(2);",
													"});",
													"",
													"",
													"if (response._links && response.count <= 1){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents with low limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/valid-documents?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"valid-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases results with High offset and limit (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f867df8c-5c6a-4911-9334-bf913cf88026",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30692`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents with high offset failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}/results/valid-documents?offset=0&limit=600",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}",
												"results",
												"valid-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "600"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all staged-releases with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59ac3f22-7495-4d9f-9252-2f304343d6d8",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"if (responseCode.code == 500){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30695`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30695`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/staged-releases/{{stagedrelasesIdAmazon}}2/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"staged-releases",
												"{{stagedrelasesIdAmazon}}2",
												"results"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ٌٌReleases",
					"item": [
						{
							"name": "Post releases",
							"item": [
								{
									"name": "Post releases (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db039025-c0fc-4f10-a8b6-6d607695f9a2",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"relasesIdShopify\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response._embedded.distributionPackage.documentKey).to.eql(\"handle\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response._embedded.distributionPackage.id).to.eql(pm.environment.get(\"distPkgIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response._embedded.distributionPackage.name).to.eql(\"Hesham Shopify\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.connectionId).to.eql(pm.environment.get(\"connectionIdShopify\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdShopify\"));",
													"});",
													"",
													"",
													"pm.test(\"Check status\", function () {",
													"    pm.expect(response.status).to.eql(\"releasing\");",
													"});",
													"",
													"pm.test(\"Check type\", function () {",
													"    pm.expect(response.type).to.eql(\"releasing\");",
													"});",
													"",
													"",
													"if (response._links && response._embedded.distributionPackage.documentKey == \"handle\" && response._embedded.distributionPackage.id == pm.environment.get(\"distPkgIdShopify\") && response._embedded.distributionPackage.connectionId ==  pm.environment.get(\"connectionIdShopify\") && response._embedded.distributionPackage.channelSchemaId == pm.environment.get(\"schemaIdShopify\") && response.type == \"releasing\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30686`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30686`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify staged-releases failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post releases (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db039025-c0fc-4f10-a8b6-6d607695f9a2",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.environment.set(\"relasesIdAmazon\", response.id);",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response has documentKey\", function () {",
													"    pm.expect(response._embedded.distributionPackage.documentKey).to.eql(\"par_item_sku\");",
													"});",
													"",
													"pm.test(\"Check response has id\", function () {",
													"    pm.expect(response._embedded.distributionPackage.id).to.eql(pm.environment.get(\"distPkgIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has name\", function () {",
													"    pm.expect(response._embedded.distributionPackage.name).to.eql(\"Hesham Amazon\");",
													"});",
													"",
													"pm.test(\"Check response has connectionID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.connectionId).to.eql(pm.environment.get(\"connectionIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check response has schemaID\", function () {",
													"    pm.expect(response._embedded.distributionPackage.channelSchemaId).to.eql(pm.environment.get(\"schemaIdAmazon\"));",
													"});",
													"",
													"pm.test(\"Check status\", function () {",
													"    pm.expect(response.status).to.eql(\"releasing\");",
													"});",
													"",
													"pm.test(\"Check type\", function () {",
													"    pm.expect(response.type).to.eql(\"releasing\");",
													"});",
													"",
													"",
													"",
													"if (response._links && response._embedded.distributionPackage.documentKey == \"item_sku\" && response._embedded.distributionPackage.id == pm.environment.get(\"distPkgIdAmazon\") && response._embedded.distributionPackage.connectionId ==  pm.environment.get(\"connectionIdAmazon\") && response._embedded.distributionPackage.channelSchemaId == pm.environment.get(\"schemaIdAmazon\") && response.type == \"releasing\"){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30686`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30686`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon staged-releases failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdAmazon}}\"\n}"
										},
										"url": {
											"raw": "{{host}}/releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post releases  with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db039025-c0fc-4f10-a8b6-6d607695f9a2",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													"if (responseCode.code == 404){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30685`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30685`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"distributionPackageId\": \"{{distPkgIdShopify}}2\"\n}"
										},
										"url": {
											"raw": "{{host}}/releases",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get releases",
							"item": [
								{
									"name": "Get all releases results (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c05c8596-12cd-43fb-ad21-066339222214",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"pm.test(\"Check response contains results field\", function() {",
													"    pm.expect(response._embedded).to.have.property(\"results\");",
													"});",
													"",
													"",
													"if (response._links && response.count && response._embedded.results[0] ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30688`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30688`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify all results failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (Shopify released-documents only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "797357e3-d1de-4591-a313-76cb3bcbc35b",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify valid documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results/released-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results",
												"released-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (Shopify errors only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a884cf8b-3f2a-4240-8e55-ff52cf6d1d36",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with low offset and limit (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fc51f23-80bc-4a8c-ba6f-5e9bebeac420",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response.count).to.be.below(2);",
													"});",
													"",
													"",
													"if (response._links && response.count <= 1){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents with low limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with high offset and limit (Shopify)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "635e5709-3fdb-4dd8-b478-e3ae53d3fe8e",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Shopify errored documents with high offset failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}/results?offset=0&limit=20",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}",
												"results"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91dbd8c2-108e-4a9d-b52d-e3b73b213745",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"pm.test(\"Check response contains results field\", function() {",
													"    pm.expect(response._embedded).to.have.property(\"results\");",
													"});",
													"",
													"",
													"if (response._links && response.count && response._embedded.results[0] ){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30688`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30688`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon all results failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC released-documents only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b044c81-850a-4a21-bfe2-e6ea16a00704",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon released documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/released-documents",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"released-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results (ASC errors only)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3ccde9f-bb87-4c20-a486-37f03637ca6b",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count  >= 0){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30691`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/errors",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"errors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with low offset and limit (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58663d47-0b77-4e84-9d04-485a31ec7ce9",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response.count).to.be.below(2);",
													"});",
													"",
													"",
													"if (response._links && response.count <= 1){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents with low limit failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/released-documents?offset=0&limit=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"released-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases results with high offset and limit (ASC)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93bfdee1-4c25-4214-ba92-d8f785936d6b",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"",
													"pm.test(\"Check response contains HAL Links\", function() {",
													"    pm.expect(response).to.have.property(\"_links\");",
													"});",
													"",
													"pm.test(\"Check response contains Count field\", function() {",
													"    pm.expect(response).to.have.property(\"count\");",
													"});",
													"",
													"",
													"if (response._links && response.count){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30693`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5, \"comment\" : \"Amazon errored documents with high offset failed\"})",
													"                        });",
													"    }}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdAmazon}}/results/released-documents?offset=0&limit=20",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdAmazon}}",
												"results",
												"released-documents"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all releases with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec4798aa-fdab-40d9-83d9-2db6df5d037f",
												"exec": [
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"if (responseCode.code == 500){",
													" ",
													"    pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30694`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"    },",
													"    body: JSON.stringify({ \"status_id\": 1 })",
													"});",
													"}",
													"else {",
													"        pm.sendRequest({",
													"    url: `https://venzee.testrail.net/index.php?/api/v2/add_result_for_case/${pm.environment.get(\"runId\")}/30694`,",
													"    method: 'POST',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'Authorization': 'Basic aGVzaGFtQHZlbnplZS5jb206Q2hpZG9yaTMwNTY='",
													"            },",
													"    body: JSON.stringify({ \"status_id\": 5})",
													"                        });",
													"    }",
													"    ",
													"    ",
													"pm.environment.unset(\"runId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/releases/{{relasesIdShopify}}2/results",
											"host": [
												"{{host}}"
											],
											"path": [
												"releases",
												"{{relasesIdShopify}}2",
												"results"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tenants",
					"item": [
						{
							"name": "Post Tenants",
							"item": [
								{
									"name": "Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83dcdd9e-e183-4908-9d5e-86c1bf0a6077",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that tenant cannot use this endpoint\", function () {",
													"    pm.expect(response.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Hesham message test\",\n    \"primaryContact\":{\n        \"firstName\": \"mahmoud\"\n    } \n}"
										},
										"url": {
											"raw": "{{host}}/tenants",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Tenant user shouldn't be able to create another tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a8d7f16-7d07-4dbe-b917-0828b0af32e7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec09b09f-5a0e-4c07-85f4-a338b9eaa4b8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Tenants by ID",
							"item": [
								{
									"name": "tenants by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ff776d0-10ec-490a-9b51-40b764e20e6b",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"pm.test(\"Check that tenant cannot use this endpoint\", function () {",
													"    pm.expect(response.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
													"});}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Tenant user shouldn't be able to get another tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "924cd1ba-8330-4f0e-a0f8-d4d09aae0be0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd2bd446-aa89-487c-b50d-37cdef706cd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Tenants",
							"item": [
								{
									"name": "Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a451e0b-fbfd-4a0a-bcbb-7a510cad0371",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that tenant cannot use this endpoint\", function () {",
													"    pm.expect(response.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Tenant user shouldn't be able to get all tenants info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40f8644d-e9e3-4598-be15-ca7eeb90272e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "785255d7-746c-4a78-9c01-734a565497e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Tenants",
							"item": [
								{
									"name": "Delete Tenants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a451e0b-fbfd-4a0a-bcbb-7a510cad0371",
												"exec": [
													" try{",
													"const response = pm.response.json()",
													"",
													"",
													"pm.test(\"Check that tenant cannot use this endpoint\", function () {",
													"    pm.expect(response.Message).to.eql(\"User is not authorized to access this resource with an explicit deny\");",
													"});",
													"}",
													"  catch(err) {console.log(err);}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Retreives all tenant IDs created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40f8644d-e9e3-4598-be15-ca7eeb90272e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "785255d7-746c-4a78-9c01-734a565497e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "channelConfigurations",
					"item": [
						{
							"name": "Put Channel Configurations",
							"item": [
								{
									"name": "channelConfigurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd704954-461f-440c-9026-2ba081f98433",
												"exec": [
													"pm.test(\"Status code is 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tenantaccess_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[{\n\t\"key\": \"shopify\",\n\t\"clientId\": \"{{clientid}}\",\n\t\"clientSecret\": \"{{clientsecret}}\",\n\t\"installUrl\": \"https://channels-qa.venzee.io/install\",\n\t\"confirmUrl\": \"https://channels-qa.venzee.io/confirm\"\n}]"
										},
										"url": {
											"raw": "{{host}}/tenants/{{tenantId}}/channel-configuration",
											"host": [
												"{{host}}"
											],
											"path": [
												"tenants",
												"{{tenantId}}",
												"channel-configuration"
											]
										}
									},
									"response": []
								}
							],
							"description": "Sets a new channel configuration for a tenant for by default to all tenants\n\nTenant user cannot use this endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c421ec7a-49f3-4a21-b7c4-605e6759acc8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60caf7a7-3408-4cbc-936f-bf9dfca2792b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1b33a398-4e48-4bcc-a906-46090cd155bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b2959869-6725-4b1f-882a-68d77ea866ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "aaadee9d-fa57-418b-922b-356e39913416",
			"key": "host ",
			"value": "api.venzee.io/v2",
			"type": "string"
		},
		{
			"id": "3782ced2-04fd-4d65-a839-1699cfccf4e5",
			"key": "appId  ",
			"value": "1rosf10qnso530kacs9b26olgq",
			"type": "string"
		},
		{
			"id": "88eacb39-c00d-4d4f-97c6-9d6e2a8157b6",
			"key": "secret ",
			"value": "ff9htc3mrntv3svic5pf8lc0td4gj68ndom0il2b44l71068dih",
			"type": "string"
		},
		{
			"id": "ee5fdd15-5bc4-42e5-81e7-2dcd3149e18b",
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "b10fc80a-7350-4e58-a985-24c0e1b7e7a9",
			"key": "dpId",
			"value": "",
			"type": "string"
		},
		{
			"id": "93159d14-64a0-4f54-9210-6ac6b1bc2974",
			"key": "tenantId",
			"value": "",
			"type": "string"
		},
		{
			"id": "5066676d-a982-4eaa-8cfa-7e9af8c08cc4",
			"key": "conid",
			"value": "",
			"type": "string"
		},
		{
			"id": "f956d469-da3a-42eb-8f6f-b53e20310e57",
			"key": "schemaid",
			"value": "",
			"type": "string"
		},
		{
			"id": "4bdf9c3f-67d7-47bd-8616-d89578d79135",
			"key": "clientid",
			"value": "",
			"type": "string"
		},
		{
			"id": "30bd93c4-8939-4260-bcfd-311c8143245e",
			"key": "clientsecret",
			"value": "",
			"type": "string"
		},
		{
			"id": "c9ba109a-800e-4998-a5fa-75a53dd80f12",
			"key": "tenantaccess_token",
			"value": "eyJraWQiOiJubFpEeGRDTHhuRmhLamJoSE1xdGx1cWx3U25pVXIwWFB6VG1ISDNQUllFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI2cTNxMzUyMmhraGZ1aDI3c2JibTBmNGhhOSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoicmFja3NwYWNlLW1lc2gtcHVibGljXC9zdGFnZWRSZWxlYXNlLmdldCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL3RlbmFudHMuYWRtaW5fd3JpdGUgcmFja3NwYWNlLW1lc2gtcHVibGljXC9zb3VyY2VEb2N1bWVudHMucGF0Y2ggcmFja3NwYWNlLW1lc2gtcHVibGljXC9zdGFnZWRSZWxlYXNlcy5nZXQgcmFja3NwYWNlLW1lc2gtcHVibGljXC9zdGFnZWRSZWxlYXNlcy5wb3N0IHJhY2tzcGFjZS1tZXNoLXB1YmxpY1wvd2ViSG9va3MucG9zdCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL3NvdXJjZURvY3VtZW50cy5kZWxldGUgcmFja3NwYWNlLW1lc2gtcHVibGljXC9zb3VyY2VEb2N1bWVudHMuZ2V0IHJhY2tzcGFjZS1tZXNoLXB1YmxpY1wvY29ubmVjdGVkQ2hhbm5lbHMucG9zdCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL2Nvbm5lY3RlZENoYW5uZWxzLmdldCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL2F2YWlsYWJsZUNoYW5uZWxzLmdldCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL3RlbmFudHMuYWRtaW5fcmVhZCByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL3NvdXJjZURvY3VtZW50cy5wdXQgcmFja3NwYWNlLW1lc2gtcHVibGljXC90ZW5hbnRzLmFkbWluX2RlbGV0ZSByYWNrc3BhY2UtbWVzaC1wdWJsaWNcL2Rpc3RyaWJ1dGlvblBhY2thZ2UuZ2V0IHJhY2tzcGFjZS1tZXNoLXB1YmxpY1wvdF9hNTE1MTBjOGNmMzlmNGE2NDhkODJkMTliNDg1ZTg1OGQgcmFja3NwYWNlLW1lc2gtcHVibGljXC9kaXN0cmlidXRpb25QYWNrYWdlcy5nZXQgcmFja3NwYWNlLW1lc2gtcHVibGljXC9kaXN0cmlidXRpb25QYWNrYWdlcy5wb3N0IHJhY2tzcGFjZS1tZXNoLXB1YmxpY1wvc3RhZ2VkUmVsZWFzZVJlc3VsdC5nZXQiLCJhdXRoX3RpbWUiOjE1NTM2MTgzMTgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX2hBRko4WTNlTyIsImV4cCI6MTU1MzYyMTkxOCwiaWF0IjoxNTUzNjE4MzE4LCJ2ZXJzaW9uIjoyLCJqdGkiOiIwMjRlMWI4My1hMzRhLTRjYTctYTcwMS03NTg4MTllZmI1MjEiLCJjbGllbnRfaWQiOiI2cTNxMzUyMmhraGZ1aDI3c2JibTBmNGhhOSJ9.GCryWzb4KeWzuK0zAUZHn0_8ZFoJitAtJOLDBPR_sYTIyUqWl2ISDDE6-LcAm1ky0gZPZeL2bzfsFUUIljYXEJa_kUmeFTwQJSJYseu6fZxlVJRRBjJQuILWBY9DhILf0PuREg4eHa9a98ZAsJ12IbIGvJ2L1vkS78Y7XidRXO7AA1SXC_PSPb0WjhwdjzInL0LBB4Ks6EPLSRnEe3YNrGX68w3UMGZ5ZWFP9Pbr1r2oSG6lbQbERr7TMjGAf1ze0Ul6SNoslgIQPEoSibHUCh-LrwlzFvDuLSios58JuvFlN2njI8iMxd1YCXzaFSAGEl6K409ogBu9sJpCO56Kqg",
			"type": "string"
		},
		{
			"id": "5c0ea897-e1d6-4a84-b594-c6420e586771",
			"key": "tappid",
			"value": "",
			"type": "string"
		},
		{
			"id": "1900a69b-e2e6-4fd7-8491-525299800aba",
			"key": "tsecret",
			"value": "",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}